
motormodul_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000af0  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800110  00800110  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb2  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070c  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057c  00000000  00000000  000036cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c2       	rjmp	.+1188   	; 0x4b6 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	05 c1       	rjmp	.+522    	; 0x258 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	ba c2       	rjmp	.+1396   	; 0x5fe <__vector_34>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bd d1       	rcall	.+890    	; 0x43e <main>
  c4:	13 c5       	rjmp	.+2598   	; 0xaec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_data_available>:
unsigned char data_set = 0;
unsigned char data_available;

unsigned char get_data_available(){
	return data_available;
}
  c8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <data_available>
  cc:	08 95       	ret

000000ce <calc_checksum>:

//Calculates a simple XOR checksum for the incomming package
unsigned char calc_checksum(volatile unsigned char data[], int size){
		unsigned char checksum = 0;
		for (int i = 0; i < (size); i++){
  ce:	16 16       	cp	r1, r22
  d0:	17 06       	cpc	r1, r23
  d2:	54 f4       	brge	.+20     	; 0xe8 <calc_checksum+0x1a>
  d4:	fc 01       	movw	r30, r24
  d6:	68 0f       	add	r22, r24
  d8:	79 1f       	adc	r23, r25
  da:	80 e0       	ldi	r24, 0x00	; 0
			checksum = checksum ^ data[i];
  dc:	91 91       	ld	r25, Z+
  de:	89 27       	eor	r24, r25
}

//Calculates a simple XOR checksum for the incomming package
unsigned char calc_checksum(volatile unsigned char data[], int size){
		unsigned char checksum = 0;
		for (int i = 0; i < (size); i++){
  e0:	e6 17       	cp	r30, r22
  e2:	f7 07       	cpc	r31, r23
  e4:	d9 f7       	brne	.-10     	; 0xdc <calc_checksum+0xe>
  e6:	08 95       	ret
	return data_available;
}

//Calculates a simple XOR checksum for the incomming package
unsigned char calc_checksum(volatile unsigned char data[], int size){
		unsigned char checksum = 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
		for (int i = 0; i < (size); i++){
			checksum = checksum ^ data[i];
		}
		return checksum;
}
  ea:	08 95       	ret

000000ec <set_outgoing>:

//converts the data of the outgoing 'sensormodul_AP_data' to the 'outgoing' char array
void set_outgoing(motormodul_AP_data* data){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	outgoing[0] = data->curr_rpm;
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	c6 e1       	ldi	r28, 0x16	; 22
  f6:	d1 e0       	ldi	r29, 0x01	; 1
  f8:	88 83       	st	Y, r24
	
	outgoing[1] = calc_checksum(outgoing, OUTGOING_PACKET_SIZE);
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	ce 01       	movw	r24, r28
 100:	e6 df       	rcall	.-52     	; 0xce <calc_checksum>
 102:	89 83       	std	Y+1, r24	; 0x01
	
	SPDR = outgoing[0];
 104:	88 81       	ld	r24, Y
 106:	8e bd       	out	0x2e, r24	; 46
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <get_incomming>:

//converts the incomming char array to a struct of type 'motormodul_PA_data'
void get_incomming(motormodul_PA_data* data){
 10e:	fc 01       	movw	r30, r24
	data->speed = incomming[0];
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b1 e0       	ldi	r27, 0x01	; 1
 114:	8c 91       	ld	r24, X
 116:	80 83       	st	Z, r24
	data->angle = incomming[1];
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	8c 91       	ld	r24, X
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	81 83       	std	Z+1, r24	; 0x01
	data->pGain = incomming[2];
 120:	12 96       	adiw	r26, 0x02	; 2
 122:	8c 91       	ld	r24, X
 124:	82 83       	std	Z+2, r24	; 0x02
 126:	08 95       	ret

00000128 <set_spi_data>:
}

//Sets the outgoing spi data. Function decladed i header file thus part of the api
void set_spi_data(motormodul_AP_data data){
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01
	if ((PINB & 0b00010000) != 0){
 134:	1c 9b       	sbis	0x03, 4	; 3
 136:	06 c0       	rjmp	.+12     	; 0x144 <set_spi_data+0x1c>
		//dismantling struct to outgoing data
		memcpy((void*) &outgoing_data, (void*) &data, sizeof(data));
 138:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <outgoing_data>
		set_outgoing(&data);
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	d5 df       	rcall	.-86     	; 0xec <set_outgoing>
 142:	03 c0       	rjmp	.+6      	; 0x14a <set_spi_data+0x22>
	}
	else{
		buffer = data;
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <buffer>
	}
}
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <get_spi_data>:
//Puts the recieved data in the incomming 'data' parameter
void get_spi_data(motormodul_PA_data* data){
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	//building up struct from incomming data
	data_available = 0;
 158:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <data_available>
	if(calc_checksum(incomming, INCOMMING_PACKET_SIZE - 1) == incomming[INCOMMING_PACKET_SIZE - 1]){
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	82 e1       	ldi	r24, 0x12	; 18
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	b4 df       	rcall	.-152    	; 0xce <calc_checksum>
 166:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <incomming+0x3>
 16a:	89 13       	cpse	r24, r25
 16c:	02 c0       	rjmp	.+4      	; 0x172 <get_spi_data+0x20>
		get_incomming(data);
 16e:	ce 01       	movw	r24, r28
 170:	ce df       	rcall	.-100    	; 0x10e <get_incomming>
	}
	memcpy((void*) incomming, 0, sizeof(incomming));
 172:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
 176:	90 91 01 00 	lds	r25, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
 17a:	a0 91 02 00 	lds	r26, 0x0002	; 0x800002 <__TEXT_REGION_LENGTH__+0x7e0002>
 17e:	b0 91 03 00 	lds	r27, 0x0003	; 0x800003 <__TEXT_REGION_LENGTH__+0x7e0003>
 182:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <incomming>
 186:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <incomming+0x1>
 18a:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <incomming+0x2>
 18e:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <incomming+0x3>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <spi_init>:

// Initialize SPI Slave Device
void spi_init (void)
{
	DDRB |= (1 << DDB6);		//Set MISO as output
 198:	26 9a       	sbi	0x04, 6	; 4
	SPCR |= (1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
 19a:	8c b5       	in	r24, 0x2c	; 44
 19c:	80 6c       	ori	r24, 0xC0	; 192
 19e:	8c bd       	out	0x2c, r24	; 44
	PORTD &= 0b11111110;		//Inits pin 0 of PORTD to 0
 1a0:	58 98       	cbi	0x0b, 0	; 11
	data_available = 0;
 1a2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <data_available>
	buffer.curr_rpm = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <buffer>
 1ac:	08 95       	ret

000001ae <spi_tranciever>:
//The data is saved in a buffer and set as outgoing data when SS goes high.
//When new data is available PORTD0 goes high until the pi has read the data, then it goes low again.
void spi_tranciever(){
	//If SS line is low then message is still being trancieved. Else there might have been a lost bit or
	//involentary reset of the other side, thus aborting current message and getting ready for a new one
	tranciever_count++;
 1ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1bc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (tranciever_count >= INCOMMING_PACKET_SIZE &&
 1c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1c8:	04 97       	sbiw	r24, 0x04	; 4
 1ca:	64 f1       	brlt	.+88     	; 0x224 <spi_tranciever+0x76>
	tranciever_count >= OUTGOING_PACKET_SIZE){
 1cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
//When new data is available PORTD0 goes high until the pi has read the data, then it goes low again.
void spi_tranciever(){
	//If SS line is low then message is still being trancieved. Else there might have been a lost bit or
	//involentary reset of the other side, thus aborting current message and getting ready for a new one
	tranciever_count++;
	if (tranciever_count >= INCOMMING_PACKET_SIZE &&
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	34 f1       	brlt	.+76     	; 0x224 <spi_tranciever+0x76>
	tranciever_count >= OUTGOING_PACKET_SIZE){
		//getting the last byte of the incomming package
		incomming[tranciever_count-1] = SPDR;
 1d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1dc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 1e0:	8e b5       	in	r24, 0x2e	; 46
 1e2:	ef 5e       	subi	r30, 0xEF	; 239
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	80 83       	st	Z, r24
		data_available = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <data_available>
		tranciever_count = 0;
 1ee:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		memcpy((void*) outgoing, 0, OUTGOING_PACKET_SIZE);
 1f6:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
 1fa:	90 91 01 00 	lds	r25, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
 1fe:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <outgoing+0x1>
 202:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <outgoing>
		if(buffer.curr_rpm != 0xFF){
 206:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <buffer>
 20a:	8f 3f       	cpi	r24, 0xFF	; 255
 20c:	39 f0       	breq	.+14     	; 0x21c <spi_tranciever+0x6e>
			set_outgoing(&buffer);
 20e:	8c e1       	ldi	r24, 0x1C	; 28
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	6c df       	rcall	.-296    	; 0xec <set_outgoing>
			buffer.curr_rpm = 0xFF;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <buffer>
 21a:	08 95       	ret
		}
		else{
			set_outgoing(&outgoing_data);
 21c:	8d e1       	ldi	r24, 0x1D	; 29
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	65 cf       	rjmp	.-310    	; 0xec <set_outgoing>
 222:	08 95       	ret
		}
	}
	else{
		incomming[tranciever_count-1] = SPDR;
 224:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 228:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	ef 5e       	subi	r30, 0xEF	; 239
 230:	fe 4f       	sbci	r31, 0xFE	; 254
 232:	80 83       	st	Z, r24
		if(tranciever_count >= OUTGOING_PACKET_SIZE){
 234:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 238:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 23c:	02 97       	sbiw	r24, 0x02	; 2
 23e:	1c f0       	brlt	.+6      	; 0x246 <spi_tranciever+0x98>
			SPDR = 0xFF;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	8e bd       	out	0x2e, r24	; 46
 244:	08 95       	ret
		}
		else{
			SPDR = outgoing[tranciever_count];
 246:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 24a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 24e:	ea 5e       	subi	r30, 0xEA	; 234
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	80 81       	ld	r24, Z
 254:	8e bd       	out	0x2e, r24	; 46
 256:	08 95       	ret

00000258 <__vector_19>:
		}
	}
}

ISR(SPI_STC_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	spi_tranciever();
 27e:	97 df       	rcall	.-210    	; 0x1ae <spi_tranciever>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <timer3_init>:
motormodul_AP_data data_out;

void timer3_init()
{
	//		--- TIMER FOR HALL EFFECT SENSOR SETUP ---
	TCCR3A |= _BV(WGM32);
 2a6:	e0 e9       	ldi	r30, 0x90	; 144
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS32);		//16MHz, 16 bit timer and 256 prescaler gives 0.95367431640625Hz
 2b0:	e1 e9       	ldi	r30, 0x91	; 145
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	80 83       	st	Z, r24
	TCNT3 = 0;					// Reset counter
 2ba:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 2be:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	TIMSK3 |= (1 << TOIE3);
 2c2:	e1 e7       	ldi	r30, 0x71	; 113
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

000002ce <pwm_init>:

void pwm_init()
{
	//		--- PWM SETUP ---
	//Pin set-up
	DDRD |= _BV(5);				//Pin 19, styrservot ()
 2ce:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= _BV(4);				//Pin 18, motor
 2d0:	54 9a       	sbi	0x0a, 4	; 10
	//timer set-up
	TCCR1A |= _BV(1) | _BV(7) | _BV(5);
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 6a       	ori	r24, 0xA2	; 162
 2da:	80 83       	st	Z, r24
	TCCR1B |= _BV(3)| _BV(4) | _BV(1);
 2dc:	e1 e8       	ldi	r30, 0x81	; 129
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	8a 61       	ori	r24, 0x1A	; 26
 2e4:	80 83       	st	Z, r24
	ICR1 = 40000;
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	9c e9       	ldi	r25, 0x9C	; 156
 2ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	//send out neutral mode
	turn = natural;
 2f2:	88 eb       	ldi	r24, 0xB8	; 184
 2f4:	9b e0       	ldi	r25, 0x0B	; 11
 2f6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <turn+0x1>
 2fa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <turn>
	scale_speed = natural;
 2fe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <scale_speed+0x1>
 302:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <scale_speed>
	OCR1A = turn;
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = scale_speed;
 30e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <scale_speed>
 312:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <scale_speed+0x1>
 316:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 31a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	 led_on();
 31e:	11 9a       	sbi	0x02, 1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	83 e2       	ldi	r24, 0x23	; 35
 324:	94 ef       	ldi	r25, 0xF4	; 244
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <pwm_init+0x58>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <pwm_init+0x62>
 330:	00 00       	nop
	_delay_ms(5000);			// delay so that the motor control receives it's neutral properly
	 led_off();
 332:	11 98       	cbi	0x02, 1	; 2
 334:	08 95       	ret

00000336 <halleffect_init>:

void halleffect_init()
{
	//		--- HALL EFFECT SETUP ---
	// PINCHANGE INTERRUPT FOR MEASURING PULSES
	DDRA  = 0b11111110;
 336:	8e ef       	ldi	r24, 0xFE	; 254
 338:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1 << PCIE0);		// set PCIE0 to enable PCMSK0 scan
 33a:	e8 e6       	ldi	r30, 0x68	; 104
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	81 60       	ori	r24, 0x01	; 1
 342:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);	// set PCINT0 to trigger an interrupt on state change
 344:	eb e6       	ldi	r30, 0x6B	; 107
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24
	tot_overflow = 0;
 34e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <tot_overflow>
 352:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <tot_overflow+0x1>
 356:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <tot_overflow+0x2>
 35a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tot_overflow+0x3>
 35e:	08 95       	ret

00000360 <scale>:
}

void scale(){
	if(data_in.angle <= 180 && data_in.angle >= 0)
 360:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <data_in+0x1>
 364:	85 3b       	cpi	r24, 0xB5	; 181
 366:	98 f4       	brcc	.+38     	; 0x38e <scale+0x2e>
	{
		turn = (int)((10 *data_in.angle) + 2100);
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	9c 01       	movw	r18, r24
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	82 0f       	add	r24, r18
 37e:	93 1f       	adc	r25, r19
 380:	8c 5c       	subi	r24, 0xCC	; 204
 382:	97 4f       	sbci	r25, 0xF7	; 247
 384:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <turn+0x1>
 388:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <turn>
 38c:	08 c0       	rjmp	.+16     	; 0x39e <scale+0x3e>
	}
	else if(data_in.angle == 90){ turn = natural;} 
 38e:	8a 35       	cpi	r24, 0x5A	; 90
 390:	31 f4       	brne	.+12     	; 0x39e <scale+0x3e>
 392:	88 eb       	ldi	r24, 0xB8	; 184
 394:	9b e0       	ldi	r25, 0x0B	; 11
 396:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <turn+0x1>
 39a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <turn>
	{
		turn = turn;
	}
	//Update speed limits,
	//Probable max speed = 40000
	if(data_in.speed <= 300 && data_in.speed >= 101)
 39e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <data_in>
 3a2:	85 36       	cpi	r24, 0x65	; 101
 3a4:	40 f0       	brcs	.+16     	; 0x3b6 <scale+0x56>
	{
		scale_speed = (int)(3180 + (data_in.speed - 100));
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	88 5f       	subi	r24, 0xF8	; 248
 3aa:	93 4f       	sbci	r25, 0xF3	; 243
 3ac:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <scale_speed+0x1>
 3b0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <scale_speed>
 3b4:	08 95       	ret
	}
	else if (data_in.speed <= 99 && data_in.speed >= 0)
 3b6:	84 36       	cpi	r24, 0x64	; 100
 3b8:	40 f4       	brcc	.+16     	; 0x3ca <scale+0x6a>
	{	
		scale_speed = (int)(2820 + (data_in.speed - 100));
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	80 56       	subi	r24, 0x60	; 96
 3be:	95 4f       	sbci	r25, 0xF5	; 245
 3c0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <scale_speed+0x1>
 3c4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <scale_speed>
 3c8:	08 95       	ret
	}
	else if (data_in.speed == 100){scale_speed = natural;}
 3ca:	84 36       	cpi	r24, 0x64	; 100
 3cc:	31 f4       	brne	.+12     	; 0x3da <scale+0x7a>
 3ce:	88 eb       	ldi	r24, 0xB8	; 184
 3d0:	9b e0       	ldi	r25, 0x0B	; 11
 3d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <scale_speed+0x1>
 3d6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <scale_speed>
 3da:	08 95       	ret

000003dc <p_loop>:
	float pGain = 0.001;						//Default value
	float currVal = 3000;						// latest input , current value


void p_loop()
{	
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
	float currOutVal = currVal;
 3e4:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 3e8:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 3ec:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 3f0:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
	float setVal = (float)scale_speed;		// the desired value of the controller
	float errorVal = setVal - currVal;		// calculate proportional term
	float pTerm = pGain * errorVal ;		// calculate the new output
	currVal = currOutVal + pTerm ;
 3f4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <scale_speed>
 3f8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <scale_speed+0x1>
 3fc:	07 2e       	mov	r0, r23
 3fe:	00 0c       	add	r0, r0
 400:	88 0b       	sbc	r24, r24
 402:	99 0b       	sbc	r25, r25
 404:	3a d2       	rcall	.+1140   	; 0x87a <__floatsisf>
 406:	a7 01       	movw	r20, r14
 408:	96 01       	movw	r18, r12
 40a:	37 d1       	rcall	.+622    	; 0x67a <__subsf3>
 40c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pGain>
 410:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pGain+0x1>
 414:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <pGain+0x2>
 418:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <pGain+0x3>
 41c:	ba d2       	rcall	.+1396   	; 0x992 <__mulsf3>
 41e:	a7 01       	movw	r20, r14
 420:	96 01       	movw	r18, r12
 422:	2c d1       	rcall	.+600    	; 0x67c <__addsf3>
 424:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 428:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 42c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 430:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
}
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	08 95       	ret

0000043e <main>:


int main(void)
{
	//		--- Initialize timers & 'modules' ---
	pwm_init();
 43e:	47 df       	rcall	.-370    	; 0x2ce <pwm_init>
	halleffect_init();
 440:	7a df       	rcall	.-268    	; 0x336 <halleffect_init>
	spi_init();
 442:	aa de       	rcall	.-684    	; 0x198 <spi_init>
 444:	30 df       	rcall	.-416    	; 0x2a6 <timer3_init>
	timer3_init();
 446:	78 94       	sei
 448:	08 e8       	ldi	r16, 0x88	; 136

	sei();
 44a:	10 e0       	ldi	r17, 0x00	; 0
			get_spi_data(&data_in);
			pGain = ((float)data_in.pGain)/1000;
			scale();
			}
		p_loop();
		OCR1A = turn;
 44c:	ca e8       	ldi	r28, 0x8A	; 138
 44e:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1B = (int)currVal;
 450:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rpm>
	
	//		--- Main loop, receive tasks from master ---
    while(1)
    {
		
		data_out.curr_rpm = rpm;
 454:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <data_out>
		set_spi_data(data_out);
 458:	67 de       	rcall	.-818    	; 0x128 <set_spi_data>
 45a:	36 de       	rcall	.-916    	; 0xc8 <get_data_available>
		if(get_data_available()){
 45c:	88 23       	and	r24, r24
 45e:	b9 f0       	breq	.+46     	; 0x48e <main+0x50>
 460:	83 e2       	ldi	r24, 0x23	; 35
			get_spi_data(&data_in);
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	76 de       	rcall	.-788    	; 0x152 <get_spi_data>
 466:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <data_in+0x2>
			pGain = ((float)data_in.pGain)/1000;
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 d2       	rcall	.+1028   	; 0x876 <__floatunsisf>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	4a e7       	ldi	r20, 0x7A	; 122
 478:	54 e4       	ldi	r21, 0x44	; 68
 47a:	64 d1       	rcall	.+712    	; 0x744 <__divsf3>
 47c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <pGain>
 480:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <pGain+0x1>
 484:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pGain+0x2>
 488:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pGain+0x3>
			scale();
 48c:	69 df       	rcall	.-302    	; 0x360 <scale>
 48e:	a6 df       	rcall	.-180    	; 0x3dc <p_loop>
			}
		p_loop();
 490:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <turn>
		OCR1A = turn;
 494:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <turn+0x1>
 498:	f8 01       	movw	r30, r16
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
 49e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
		OCR1B = (int)currVal;
 4a2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 4a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 4aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 4ae:	b2 d1       	rcall	.+868    	; 0x814 <__fixsfsi>
 4b0:	79 83       	std	Y+1, r23	; 0x01
 4b2:	68 83       	st	Y, r22
 4b4:	cd cf       	rjmp	.-102    	; 0x450 <main+0x12>

000004b6 <__vector_4>:
 4b6:	1f 92       	push	r1
    }
 4b8:	0f 92       	push	r0
}


ISR(PCINT0_vect)
{
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	0b b6       	in	r0, 0x3b	; 59
 4c2:	0f 92       	push	r0
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	//		--- Pin change interrupt for hall effect sensor ---
	// Just measure on incoming magnet, not outgoing
	if( PINA & ((1 << PIND0) == 1)){
 4e4:	00 9b       	sbis	0x00, 0	; 0
 4e6:	74 c0       	rjmp	.+232    	; 0x5d0 <__vector_4+0x11a>
		
		// Debug LED
		if (led_is_on())
 4e8:	11 9b       	sbis	0x02, 1	; 2
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__vector_4+0x3a>
			led_off();
 4ec:	11 98       	cbi	0x02, 1	; 2
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__vector_4+0x3c>
		else
			led_on();
 4f0:	11 9a       	sbi	0x02, 1	; 2
	
		// RPM Calculations TODO: CHANGE DATA TYPES
		current_ticks = TCNT3;
 4f2:	e4 e9       	ldi	r30, 0x94	; 148
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	91 81       	ldd	r25, Z+1	; 0x01
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <current_ticks>
 502:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <current_ticks+0x1>
 506:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <current_ticks+0x2>
 50a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <current_ticks+0x3>
		ticks_elapsed = (tot_overflow * TIMER_TICKS) + current_ticks;
 50e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <tot_overflow>
 512:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <tot_overflow+0x1>
 516:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <tot_overflow+0x2>
 51a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <tot_overflow+0x3>
 51e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <TIMER_TICKS>
 522:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <TIMER_TICKS+0x1>
 526:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TIMER_TICKS+0x2>
 52a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <TIMER_TICKS+0x3>
 52e:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <current_ticks>
 532:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <current_ticks+0x1>
 536:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <current_ticks+0x2>
 53a:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <current_ticks+0x3>
 53e:	8c d2       	rcall	.+1304   	; 0xa58 <__mulsi3>
 540:	c6 0e       	add	r12, r22
 542:	d7 1e       	adc	r13, r23
 544:	e8 1e       	adc	r14, r24
 546:	f9 1e       	adc	r15, r25
 548:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <ticks_elapsed>
 54c:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <ticks_elapsed+0x1>
 550:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <ticks_elapsed+0x2>
 554:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <ticks_elapsed+0x3>
		time_elapsed = ticks_elapsed * micro_seconds_per_tick;//seconds
 558:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <ticks_elapsed>
 55c:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <ticks_elapsed+0x1>
 560:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <ticks_elapsed+0x2>
 564:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <ticks_elapsed+0x3>
 568:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <micro_seconds_per_tick>
 56c:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <micro_seconds_per_tick+0x1>
 570:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <micro_seconds_per_tick+0x2>
 574:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <micro_seconds_per_tick+0x3>
 578:	6f d2       	rcall	.+1246   	; 0xa58 <__mulsi3>
 57a:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <time_elapsed>
 57e:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <time_elapsed+0x1>
 582:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <time_elapsed+0x2>
 586:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <time_elapsed+0x3>
		tot_overflow = 0;		//Reset registered overflows and timer counter
 58a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <tot_overflow>
 58e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <tot_overflow+0x1>
 592:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <tot_overflow+0x2>
 596:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tot_overflow+0x3>
		TCNT3 = 0;
 59a:	11 82       	std	Z+1, r1	; 0x01
 59c:	10 82       	st	Z, r1
	
		rpm = (uint8_t) (60000000/(time_elapsed*4));//60*1.000.000 minute and scale microseconds
 59e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <time_elapsed>
 5a2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <time_elapsed+0x1>
 5a6:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <time_elapsed+0x2>
 5aa:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <time_elapsed+0x3>
 5ae:	9c 01       	movw	r18, r24
 5b0:	ad 01       	movw	r20, r26
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	44 1f       	adc	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	44 1f       	adc	r20, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	77 e8       	ldi	r23, 0x87	; 135
 5c6:	83 e9       	ldi	r24, 0x93	; 147
 5c8:	93 e0       	ldi	r25, 0x03	; 3
 5ca:	55 d2       	rcall	.+1194   	; 0xa76 <__udivmodsi4>
 5cc:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <rpm>
	}
}
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	0f 90       	pop	r0
 5f2:	0b be       	out	0x3b, r0	; 59
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__vector_34>:


ISR(TIMER3_OVF_vect)
{
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
	//		--- Timer interupt (0.953~ Hz) ---
	
	// Debug LED (Not connected to board currently 24/11)
	if (timer_led_is_on())
 610:	12 9b       	sbis	0x02, 2	; 2
 612:	02 c0       	rjmp	.+4      	; 0x618 <__vector_34+0x1a>
	timer_led_off();
 614:	12 98       	cbi	0x02, 2	; 2
 616:	01 c0       	rjmp	.+2      	; 0x61a <__vector_34+0x1c>
	else
	timer_led_on();
 618:	12 9a       	sbi	0x02, 2	; 2
	
	tot_overflow++;
 61a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tot_overflow>
 61e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tot_overflow+0x1>
 622:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <tot_overflow+0x2>
 626:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <tot_overflow+0x3>
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	a1 1d       	adc	r26, r1
 62e:	b1 1d       	adc	r27, r1
 630:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <tot_overflow>
 634:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <tot_overflow+0x1>
 638:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <tot_overflow+0x2>
 63c:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <tot_overflow+0x3>
	if(tot_overflow >= 2){
 640:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tot_overflow>
 644:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tot_overflow+0x1>
 648:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <tot_overflow+0x2>
 64c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <tot_overflow+0x3>
 650:	02 97       	sbiw	r24, 0x02	; 2
 652:	a1 05       	cpc	r26, r1
 654:	b1 05       	cpc	r27, r1
 656:	40 f0       	brcs	.+16     	; 0x668 <__vector_34+0x6a>
		rpm = 0;
 658:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <rpm>
		new_rpm=1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <new_rpm+0x1>
 664:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <new_rpm>
		
	}
}
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <__subsf3>:
 67a:	50 58       	subi	r21, 0x80	; 128

0000067c <__addsf3>:
 67c:	bb 27       	eor	r27, r27
 67e:	aa 27       	eor	r26, r26
 680:	0e d0       	rcall	.+28     	; 0x69e <__addsf3x>
 682:	4d c1       	rjmp	.+666    	; 0x91e <__fp_round>
 684:	3e d1       	rcall	.+636    	; 0x902 <__fp_pscA>
 686:	30 f0       	brcs	.+12     	; 0x694 <__addsf3+0x18>
 688:	43 d1       	rcall	.+646    	; 0x910 <__fp_pscB>
 68a:	20 f0       	brcs	.+8      	; 0x694 <__addsf3+0x18>
 68c:	31 f4       	brne	.+12     	; 0x69a <__addsf3+0x1e>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	11 f4       	brne	.+4      	; 0x696 <__addsf3+0x1a>
 692:	1e f4       	brtc	.+6      	; 0x69a <__addsf3+0x1e>
 694:	33 c1       	rjmp	.+614    	; 0x8fc <__fp_nan>
 696:	0e f4       	brtc	.+2      	; 0x69a <__addsf3+0x1e>
 698:	e0 95       	com	r30
 69a:	e7 fb       	bst	r30, 7
 69c:	29 c1       	rjmp	.+594    	; 0x8f0 <__fp_inf>

0000069e <__addsf3x>:
 69e:	e9 2f       	mov	r30, r25
 6a0:	4f d1       	rcall	.+670    	; 0x940 <__fp_split3>
 6a2:	80 f3       	brcs	.-32     	; 0x684 <__addsf3+0x8>
 6a4:	ba 17       	cp	r27, r26
 6a6:	62 07       	cpc	r22, r18
 6a8:	73 07       	cpc	r23, r19
 6aa:	84 07       	cpc	r24, r20
 6ac:	95 07       	cpc	r25, r21
 6ae:	18 f0       	brcs	.+6      	; 0x6b6 <__addsf3x+0x18>
 6b0:	71 f4       	brne	.+28     	; 0x6ce <__addsf3x+0x30>
 6b2:	9e f5       	brtc	.+102    	; 0x71a <__addsf3x+0x7c>
 6b4:	67 c1       	rjmp	.+718    	; 0x984 <__fp_zero>
 6b6:	0e f4       	brtc	.+2      	; 0x6ba <__addsf3x+0x1c>
 6b8:	e0 95       	com	r30
 6ba:	0b 2e       	mov	r0, r27
 6bc:	ba 2f       	mov	r27, r26
 6be:	a0 2d       	mov	r26, r0
 6c0:	0b 01       	movw	r0, r22
 6c2:	b9 01       	movw	r22, r18
 6c4:	90 01       	movw	r18, r0
 6c6:	0c 01       	movw	r0, r24
 6c8:	ca 01       	movw	r24, r20
 6ca:	a0 01       	movw	r20, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	ff 27       	eor	r31, r31
 6d0:	59 1b       	sub	r21, r25
 6d2:	99 f0       	breq	.+38     	; 0x6fa <__addsf3x+0x5c>
 6d4:	59 3f       	cpi	r21, 0xF9	; 249
 6d6:	50 f4       	brcc	.+20     	; 0x6ec <__addsf3x+0x4e>
 6d8:	50 3e       	cpi	r21, 0xE0	; 224
 6da:	68 f1       	brcs	.+90     	; 0x736 <__addsf3x+0x98>
 6dc:	1a 16       	cp	r1, r26
 6de:	f0 40       	sbci	r31, 0x00	; 0
 6e0:	a2 2f       	mov	r26, r18
 6e2:	23 2f       	mov	r18, r19
 6e4:	34 2f       	mov	r19, r20
 6e6:	44 27       	eor	r20, r20
 6e8:	58 5f       	subi	r21, 0xF8	; 248
 6ea:	f3 cf       	rjmp	.-26     	; 0x6d2 <__addsf3x+0x34>
 6ec:	46 95       	lsr	r20
 6ee:	37 95       	ror	r19
 6f0:	27 95       	ror	r18
 6f2:	a7 95       	ror	r26
 6f4:	f0 40       	sbci	r31, 0x00	; 0
 6f6:	53 95       	inc	r21
 6f8:	c9 f7       	brne	.-14     	; 0x6ec <__addsf3x+0x4e>
 6fa:	7e f4       	brtc	.+30     	; 0x71a <__addsf3x+0x7c>
 6fc:	1f 16       	cp	r1, r31
 6fe:	ba 0b       	sbc	r27, r26
 700:	62 0b       	sbc	r22, r18
 702:	73 0b       	sbc	r23, r19
 704:	84 0b       	sbc	r24, r20
 706:	ba f0       	brmi	.+46     	; 0x736 <__addsf3x+0x98>
 708:	91 50       	subi	r25, 0x01	; 1
 70a:	a1 f0       	breq	.+40     	; 0x734 <__addsf3x+0x96>
 70c:	ff 0f       	add	r31, r31
 70e:	bb 1f       	adc	r27, r27
 710:	66 1f       	adc	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	c2 f7       	brpl	.-16     	; 0x708 <__addsf3x+0x6a>
 718:	0e c0       	rjmp	.+28     	; 0x736 <__addsf3x+0x98>
 71a:	ba 0f       	add	r27, r26
 71c:	62 1f       	adc	r22, r18
 71e:	73 1f       	adc	r23, r19
 720:	84 1f       	adc	r24, r20
 722:	48 f4       	brcc	.+18     	; 0x736 <__addsf3x+0x98>
 724:	87 95       	ror	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	f7 95       	ror	r31
 72e:	9e 3f       	cpi	r25, 0xFE	; 254
 730:	08 f0       	brcs	.+2      	; 0x734 <__addsf3x+0x96>
 732:	b3 cf       	rjmp	.-154    	; 0x69a <__addsf3+0x1e>
 734:	93 95       	inc	r25
 736:	88 0f       	add	r24, r24
 738:	08 f0       	brcs	.+2      	; 0x73c <__addsf3x+0x9e>
 73a:	99 27       	eor	r25, r25
 73c:	ee 0f       	add	r30, r30
 73e:	97 95       	ror	r25
 740:	87 95       	ror	r24
 742:	08 95       	ret

00000744 <__divsf3>:
 744:	0c d0       	rcall	.+24     	; 0x75e <__divsf3x>
 746:	eb c0       	rjmp	.+470    	; 0x91e <__fp_round>
 748:	e3 d0       	rcall	.+454    	; 0x910 <__fp_pscB>
 74a:	40 f0       	brcs	.+16     	; 0x75c <__divsf3+0x18>
 74c:	da d0       	rcall	.+436    	; 0x902 <__fp_pscA>
 74e:	30 f0       	brcs	.+12     	; 0x75c <__divsf3+0x18>
 750:	21 f4       	brne	.+8      	; 0x75a <__divsf3+0x16>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	19 f0       	breq	.+6      	; 0x75c <__divsf3+0x18>
 756:	cc c0       	rjmp	.+408    	; 0x8f0 <__fp_inf>
 758:	51 11       	cpse	r21, r1
 75a:	15 c1       	rjmp	.+554    	; 0x986 <__fp_szero>
 75c:	cf c0       	rjmp	.+414    	; 0x8fc <__fp_nan>

0000075e <__divsf3x>:
 75e:	f0 d0       	rcall	.+480    	; 0x940 <__fp_split3>
 760:	98 f3       	brcs	.-26     	; 0x748 <__divsf3+0x4>

00000762 <__divsf3_pse>:
 762:	99 23       	and	r25, r25
 764:	c9 f3       	breq	.-14     	; 0x758 <__divsf3+0x14>
 766:	55 23       	and	r21, r21
 768:	b1 f3       	breq	.-20     	; 0x756 <__divsf3+0x12>
 76a:	95 1b       	sub	r25, r21
 76c:	55 0b       	sbc	r21, r21
 76e:	bb 27       	eor	r27, r27
 770:	aa 27       	eor	r26, r26
 772:	62 17       	cp	r22, r18
 774:	73 07       	cpc	r23, r19
 776:	84 07       	cpc	r24, r20
 778:	38 f0       	brcs	.+14     	; 0x788 <__divsf3_pse+0x26>
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	5f 4f       	sbci	r21, 0xFF	; 255
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	44 1f       	adc	r20, r20
 784:	aa 1f       	adc	r26, r26
 786:	a9 f3       	breq	.-22     	; 0x772 <__divsf3_pse+0x10>
 788:	33 d0       	rcall	.+102    	; 0x7f0 <__divsf3_pse+0x8e>
 78a:	0e 2e       	mov	r0, r30
 78c:	3a f0       	brmi	.+14     	; 0x79c <__divsf3_pse+0x3a>
 78e:	e0 e8       	ldi	r30, 0x80	; 128
 790:	30 d0       	rcall	.+96     	; 0x7f2 <__divsf3_pse+0x90>
 792:	91 50       	subi	r25, 0x01	; 1
 794:	50 40       	sbci	r21, 0x00	; 0
 796:	e6 95       	lsr	r30
 798:	00 1c       	adc	r0, r0
 79a:	ca f7       	brpl	.-14     	; 0x78e <__divsf3_pse+0x2c>
 79c:	29 d0       	rcall	.+82     	; 0x7f0 <__divsf3_pse+0x8e>
 79e:	fe 2f       	mov	r31, r30
 7a0:	27 d0       	rcall	.+78     	; 0x7f0 <__divsf3_pse+0x8e>
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	bb 1f       	adc	r27, r27
 7aa:	26 17       	cp	r18, r22
 7ac:	37 07       	cpc	r19, r23
 7ae:	48 07       	cpc	r20, r24
 7b0:	ab 07       	cpc	r26, r27
 7b2:	b0 e8       	ldi	r27, 0x80	; 128
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <__divsf3_pse+0x56>
 7b6:	bb 0b       	sbc	r27, r27
 7b8:	80 2d       	mov	r24, r0
 7ba:	bf 01       	movw	r22, r30
 7bc:	ff 27       	eor	r31, r31
 7be:	93 58       	subi	r25, 0x83	; 131
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	2a f0       	brmi	.+10     	; 0x7ce <__divsf3_pse+0x6c>
 7c4:	9e 3f       	cpi	r25, 0xFE	; 254
 7c6:	51 05       	cpc	r21, r1
 7c8:	68 f0       	brcs	.+26     	; 0x7e4 <__divsf3_pse+0x82>
 7ca:	92 c0       	rjmp	.+292    	; 0x8f0 <__fp_inf>
 7cc:	dc c0       	rjmp	.+440    	; 0x986 <__fp_szero>
 7ce:	5f 3f       	cpi	r21, 0xFF	; 255
 7d0:	ec f3       	brlt	.-6      	; 0x7cc <__divsf3_pse+0x6a>
 7d2:	98 3e       	cpi	r25, 0xE8	; 232
 7d4:	dc f3       	brlt	.-10     	; 0x7cc <__divsf3_pse+0x6a>
 7d6:	86 95       	lsr	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f7 95       	ror	r31
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c9 f7       	brne	.-14     	; 0x7d6 <__divsf3_pse+0x74>
 7e4:	88 0f       	add	r24, r24
 7e6:	91 1d       	adc	r25, r1
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret
 7f0:	e1 e0       	ldi	r30, 0x01	; 1
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	bb 1f       	adc	r27, r27
 7fa:	62 17       	cp	r22, r18
 7fc:	73 07       	cpc	r23, r19
 7fe:	84 07       	cpc	r24, r20
 800:	ba 07       	cpc	r27, r26
 802:	20 f0       	brcs	.+8      	; 0x80c <__divsf3_pse+0xaa>
 804:	62 1b       	sub	r22, r18
 806:	73 0b       	sbc	r23, r19
 808:	84 0b       	sbc	r24, r20
 80a:	ba 0b       	sbc	r27, r26
 80c:	ee 1f       	adc	r30, r30
 80e:	88 f7       	brcc	.-30     	; 0x7f2 <__divsf3_pse+0x90>
 810:	e0 95       	com	r30
 812:	08 95       	ret

00000814 <__fixsfsi>:
 814:	04 d0       	rcall	.+8      	; 0x81e <__fixunssfsi>
 816:	68 94       	set
 818:	b1 11       	cpse	r27, r1
 81a:	b5 c0       	rjmp	.+362    	; 0x986 <__fp_szero>
 81c:	08 95       	ret

0000081e <__fixunssfsi>:
 81e:	98 d0       	rcall	.+304    	; 0x950 <__fp_splitA>
 820:	88 f0       	brcs	.+34     	; 0x844 <__fixunssfsi+0x26>
 822:	9f 57       	subi	r25, 0x7F	; 127
 824:	90 f0       	brcs	.+36     	; 0x84a <__fixunssfsi+0x2c>
 826:	b9 2f       	mov	r27, r25
 828:	99 27       	eor	r25, r25
 82a:	b7 51       	subi	r27, 0x17	; 23
 82c:	a0 f0       	brcs	.+40     	; 0x856 <__fixunssfsi+0x38>
 82e:	d1 f0       	breq	.+52     	; 0x864 <__fixunssfsi+0x46>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	1a f0       	brmi	.+6      	; 0x840 <__fixunssfsi+0x22>
 83a:	ba 95       	dec	r27
 83c:	c9 f7       	brne	.-14     	; 0x830 <__fixunssfsi+0x12>
 83e:	12 c0       	rjmp	.+36     	; 0x864 <__fixunssfsi+0x46>
 840:	b1 30       	cpi	r27, 0x01	; 1
 842:	81 f0       	breq	.+32     	; 0x864 <__fixunssfsi+0x46>
 844:	9f d0       	rcall	.+318    	; 0x984 <__fp_zero>
 846:	b1 e0       	ldi	r27, 0x01	; 1
 848:	08 95       	ret
 84a:	9c c0       	rjmp	.+312    	; 0x984 <__fp_zero>
 84c:	67 2f       	mov	r22, r23
 84e:	78 2f       	mov	r23, r24
 850:	88 27       	eor	r24, r24
 852:	b8 5f       	subi	r27, 0xF8	; 248
 854:	39 f0       	breq	.+14     	; 0x864 <__fixunssfsi+0x46>
 856:	b9 3f       	cpi	r27, 0xF9	; 249
 858:	cc f3       	brlt	.-14     	; 0x84c <__fixunssfsi+0x2e>
 85a:	86 95       	lsr	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b3 95       	inc	r27
 862:	d9 f7       	brne	.-10     	; 0x85a <__fixunssfsi+0x3c>
 864:	3e f4       	brtc	.+14     	; 0x874 <__fixunssfsi+0x56>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__floatunsisf>:
 876:	e8 94       	clt
 878:	09 c0       	rjmp	.+18     	; 0x88c <__floatsisf+0x12>

0000087a <__floatsisf>:
 87a:	97 fb       	bst	r25, 7
 87c:	3e f4       	brtc	.+14     	; 0x88c <__floatsisf+0x12>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	99 23       	and	r25, r25
 88e:	a9 f0       	breq	.+42     	; 0x8ba <__floatsisf+0x40>
 890:	f9 2f       	mov	r31, r25
 892:	96 e9       	ldi	r25, 0x96	; 150
 894:	bb 27       	eor	r27, r27
 896:	93 95       	inc	r25
 898:	f6 95       	lsr	r31
 89a:	87 95       	ror	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f1 11       	cpse	r31, r1
 8a4:	f8 cf       	rjmp	.-16     	; 0x896 <__floatsisf+0x1c>
 8a6:	fa f4       	brpl	.+62     	; 0x8e6 <__floatsisf+0x6c>
 8a8:	bb 0f       	add	r27, r27
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <__floatsisf+0x36>
 8ac:	60 ff       	sbrs	r22, 0
 8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <__floatsisf+0x6c>
 8b0:	6f 5f       	subi	r22, 0xFF	; 255
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__floatsisf+0x6c>
 8ba:	88 23       	and	r24, r24
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <__floatsisf+0x48>
 8be:	96 e9       	ldi	r25, 0x96	; 150
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__floatsisf+0x6a>
 8c2:	77 23       	and	r23, r23
 8c4:	21 f0       	breq	.+8      	; 0x8ce <__floatsisf+0x54>
 8c6:	9e e8       	ldi	r25, 0x8E	; 142
 8c8:	87 2f       	mov	r24, r23
 8ca:	76 2f       	mov	r23, r22
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__floatsisf+0x5e>
 8ce:	66 23       	and	r22, r22
 8d0:	71 f0       	breq	.+28     	; 0x8ee <__floatsisf+0x74>
 8d2:	96 e8       	ldi	r25, 0x86	; 134
 8d4:	86 2f       	mov	r24, r22
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	2a f0       	brmi	.+10     	; 0x8e6 <__floatsisf+0x6c>
 8dc:	9a 95       	dec	r25
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	da f7       	brpl	.-10     	; 0x8dc <__floatsisf+0x62>
 8e6:	88 0f       	add	r24, r24
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	97 f9       	bld	r25, 7
 8ee:	08 95       	ret

000008f0 <__fp_inf>:
 8f0:	97 f9       	bld	r25, 7
 8f2:	9f 67       	ori	r25, 0x7F	; 127
 8f4:	80 e8       	ldi	r24, 0x80	; 128
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	08 95       	ret

000008fc <__fp_nan>:
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	80 ec       	ldi	r24, 0xC0	; 192
 900:	08 95       	ret

00000902 <__fp_pscA>:
 902:	00 24       	eor	r0, r0
 904:	0a 94       	dec	r0
 906:	16 16       	cp	r1, r22
 908:	17 06       	cpc	r1, r23
 90a:	18 06       	cpc	r1, r24
 90c:	09 06       	cpc	r0, r25
 90e:	08 95       	ret

00000910 <__fp_pscB>:
 910:	00 24       	eor	r0, r0
 912:	0a 94       	dec	r0
 914:	12 16       	cp	r1, r18
 916:	13 06       	cpc	r1, r19
 918:	14 06       	cpc	r1, r20
 91a:	05 06       	cpc	r0, r21
 91c:	08 95       	ret

0000091e <__fp_round>:
 91e:	09 2e       	mov	r0, r25
 920:	03 94       	inc	r0
 922:	00 0c       	add	r0, r0
 924:	11 f4       	brne	.+4      	; 0x92a <__fp_round+0xc>
 926:	88 23       	and	r24, r24
 928:	52 f0       	brmi	.+20     	; 0x93e <__fp_round+0x20>
 92a:	bb 0f       	add	r27, r27
 92c:	40 f4       	brcc	.+16     	; 0x93e <__fp_round+0x20>
 92e:	bf 2b       	or	r27, r31
 930:	11 f4       	brne	.+4      	; 0x936 <__fp_round+0x18>
 932:	60 ff       	sbrs	r22, 0
 934:	04 c0       	rjmp	.+8      	; 0x93e <__fp_round+0x20>
 936:	6f 5f       	subi	r22, 0xFF	; 255
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <__fp_split3>:
 940:	57 fd       	sbrc	r21, 7
 942:	90 58       	subi	r25, 0x80	; 128
 944:	44 0f       	add	r20, r20
 946:	55 1f       	adc	r21, r21
 948:	59 f0       	breq	.+22     	; 0x960 <__fp_splitA+0x10>
 94a:	5f 3f       	cpi	r21, 0xFF	; 255
 94c:	71 f0       	breq	.+28     	; 0x96a <__fp_splitA+0x1a>
 94e:	47 95       	ror	r20

00000950 <__fp_splitA>:
 950:	88 0f       	add	r24, r24
 952:	97 fb       	bst	r25, 7
 954:	99 1f       	adc	r25, r25
 956:	61 f0       	breq	.+24     	; 0x970 <__fp_splitA+0x20>
 958:	9f 3f       	cpi	r25, 0xFF	; 255
 95a:	79 f0       	breq	.+30     	; 0x97a <__fp_splitA+0x2a>
 95c:	87 95       	ror	r24
 95e:	08 95       	ret
 960:	12 16       	cp	r1, r18
 962:	13 06       	cpc	r1, r19
 964:	14 06       	cpc	r1, r20
 966:	55 1f       	adc	r21, r21
 968:	f2 cf       	rjmp	.-28     	; 0x94e <__fp_split3+0xe>
 96a:	46 95       	lsr	r20
 96c:	f1 df       	rcall	.-30     	; 0x950 <__fp_splitA>
 96e:	08 c0       	rjmp	.+16     	; 0x980 <__fp_splitA+0x30>
 970:	16 16       	cp	r1, r22
 972:	17 06       	cpc	r1, r23
 974:	18 06       	cpc	r1, r24
 976:	99 1f       	adc	r25, r25
 978:	f1 cf       	rjmp	.-30     	; 0x95c <__fp_splitA+0xc>
 97a:	86 95       	lsr	r24
 97c:	71 05       	cpc	r23, r1
 97e:	61 05       	cpc	r22, r1
 980:	08 94       	sec
 982:	08 95       	ret

00000984 <__fp_zero>:
 984:	e8 94       	clt

00000986 <__fp_szero>:
 986:	bb 27       	eor	r27, r27
 988:	66 27       	eor	r22, r22
 98a:	77 27       	eor	r23, r23
 98c:	cb 01       	movw	r24, r22
 98e:	97 f9       	bld	r25, 7
 990:	08 95       	ret

00000992 <__mulsf3>:
 992:	0b d0       	rcall	.+22     	; 0x9aa <__mulsf3x>
 994:	c4 cf       	rjmp	.-120    	; 0x91e <__fp_round>
 996:	b5 df       	rcall	.-150    	; 0x902 <__fp_pscA>
 998:	28 f0       	brcs	.+10     	; 0x9a4 <__mulsf3+0x12>
 99a:	ba df       	rcall	.-140    	; 0x910 <__fp_pscB>
 99c:	18 f0       	brcs	.+6      	; 0x9a4 <__mulsf3+0x12>
 99e:	95 23       	and	r25, r21
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <__mulsf3+0x12>
 9a2:	a6 cf       	rjmp	.-180    	; 0x8f0 <__fp_inf>
 9a4:	ab cf       	rjmp	.-170    	; 0x8fc <__fp_nan>
 9a6:	11 24       	eor	r1, r1
 9a8:	ee cf       	rjmp	.-36     	; 0x986 <__fp_szero>

000009aa <__mulsf3x>:
 9aa:	ca df       	rcall	.-108    	; 0x940 <__fp_split3>
 9ac:	a0 f3       	brcs	.-24     	; 0x996 <__mulsf3+0x4>

000009ae <__mulsf3_pse>:
 9ae:	95 9f       	mul	r25, r21
 9b0:	d1 f3       	breq	.-12     	; 0x9a6 <__mulsf3+0x14>
 9b2:	95 0f       	add	r25, r21
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	55 1f       	adc	r21, r21
 9b8:	62 9f       	mul	r22, r18
 9ba:	f0 01       	movw	r30, r0
 9bc:	72 9f       	mul	r23, r18
 9be:	bb 27       	eor	r27, r27
 9c0:	f0 0d       	add	r31, r0
 9c2:	b1 1d       	adc	r27, r1
 9c4:	63 9f       	mul	r22, r19
 9c6:	aa 27       	eor	r26, r26
 9c8:	f0 0d       	add	r31, r0
 9ca:	b1 1d       	adc	r27, r1
 9cc:	aa 1f       	adc	r26, r26
 9ce:	64 9f       	mul	r22, r20
 9d0:	66 27       	eor	r22, r22
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	66 1f       	adc	r22, r22
 9d8:	82 9f       	mul	r24, r18
 9da:	22 27       	eor	r18, r18
 9dc:	b0 0d       	add	r27, r0
 9de:	a1 1d       	adc	r26, r1
 9e0:	62 1f       	adc	r22, r18
 9e2:	73 9f       	mul	r23, r19
 9e4:	b0 0d       	add	r27, r0
 9e6:	a1 1d       	adc	r26, r1
 9e8:	62 1f       	adc	r22, r18
 9ea:	83 9f       	mul	r24, r19
 9ec:	a0 0d       	add	r26, r0
 9ee:	61 1d       	adc	r22, r1
 9f0:	22 1f       	adc	r18, r18
 9f2:	74 9f       	mul	r23, r20
 9f4:	33 27       	eor	r19, r19
 9f6:	a0 0d       	add	r26, r0
 9f8:	61 1d       	adc	r22, r1
 9fa:	23 1f       	adc	r18, r19
 9fc:	84 9f       	mul	r24, r20
 9fe:	60 0d       	add	r22, r0
 a00:	21 1d       	adc	r18, r1
 a02:	82 2f       	mov	r24, r18
 a04:	76 2f       	mov	r23, r22
 a06:	6a 2f       	mov	r22, r26
 a08:	11 24       	eor	r1, r1
 a0a:	9f 57       	subi	r25, 0x7F	; 127
 a0c:	50 40       	sbci	r21, 0x00	; 0
 a0e:	8a f0       	brmi	.+34     	; 0xa32 <__mulsf3_pse+0x84>
 a10:	e1 f0       	breq	.+56     	; 0xa4a <__mulsf3_pse+0x9c>
 a12:	88 23       	and	r24, r24
 a14:	4a f0       	brmi	.+18     	; 0xa28 <__mulsf3_pse+0x7a>
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	bb 1f       	adc	r27, r27
 a1c:	66 1f       	adc	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	88 1f       	adc	r24, r24
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	a9 f7       	brne	.-22     	; 0xa12 <__mulsf3_pse+0x64>
 a28:	9e 3f       	cpi	r25, 0xFE	; 254
 a2a:	51 05       	cpc	r21, r1
 a2c:	70 f0       	brcs	.+28     	; 0xa4a <__mulsf3_pse+0x9c>
 a2e:	60 cf       	rjmp	.-320    	; 0x8f0 <__fp_inf>
 a30:	aa cf       	rjmp	.-172    	; 0x986 <__fp_szero>
 a32:	5f 3f       	cpi	r21, 0xFF	; 255
 a34:	ec f3       	brlt	.-6      	; 0xa30 <__mulsf3_pse+0x82>
 a36:	98 3e       	cpi	r25, 0xE8	; 232
 a38:	dc f3       	brlt	.-10     	; 0xa30 <__mulsf3_pse+0x82>
 a3a:	86 95       	lsr	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b7 95       	ror	r27
 a42:	f7 95       	ror	r31
 a44:	e7 95       	ror	r30
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	c1 f7       	brne	.-16     	; 0xa3a <__mulsf3_pse+0x8c>
 a4a:	fe 2b       	or	r31, r30
 a4c:	88 0f       	add	r24, r24
 a4e:	91 1d       	adc	r25, r1
 a50:	96 95       	lsr	r25
 a52:	87 95       	ror	r24
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret

00000a58 <__mulsi3>:
 a58:	db 01       	movw	r26, r22
 a5a:	8f 93       	push	r24
 a5c:	9f 93       	push	r25
 a5e:	2d d0       	rcall	.+90     	; 0xaba <__muluhisi3>
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	a2 9f       	mul	r26, r18
 a66:	80 0d       	add	r24, r0
 a68:	91 1d       	adc	r25, r1
 a6a:	a3 9f       	mul	r26, r19
 a6c:	90 0d       	add	r25, r0
 a6e:	b2 9f       	mul	r27, r18
 a70:	90 0d       	add	r25, r0
 a72:	11 24       	eor	r1, r1
 a74:	08 95       	ret

00000a76 <__udivmodsi4>:
 a76:	a1 e2       	ldi	r26, 0x21	; 33
 a78:	1a 2e       	mov	r1, r26
 a7a:	aa 1b       	sub	r26, r26
 a7c:	bb 1b       	sub	r27, r27
 a7e:	fd 01       	movw	r30, r26
 a80:	0d c0       	rjmp	.+26     	; 0xa9c <__udivmodsi4_ep>

00000a82 <__udivmodsi4_loop>:
 a82:	aa 1f       	adc	r26, r26
 a84:	bb 1f       	adc	r27, r27
 a86:	ee 1f       	adc	r30, r30
 a88:	ff 1f       	adc	r31, r31
 a8a:	a2 17       	cp	r26, r18
 a8c:	b3 07       	cpc	r27, r19
 a8e:	e4 07       	cpc	r30, r20
 a90:	f5 07       	cpc	r31, r21
 a92:	20 f0       	brcs	.+8      	; 0xa9c <__udivmodsi4_ep>
 a94:	a2 1b       	sub	r26, r18
 a96:	b3 0b       	sbc	r27, r19
 a98:	e4 0b       	sbc	r30, r20
 a9a:	f5 0b       	sbc	r31, r21

00000a9c <__udivmodsi4_ep>:
 a9c:	66 1f       	adc	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	1a 94       	dec	r1
 aa6:	69 f7       	brne	.-38     	; 0xa82 <__udivmodsi4_loop>
 aa8:	60 95       	com	r22
 aaa:	70 95       	com	r23
 aac:	80 95       	com	r24
 aae:	90 95       	com	r25
 ab0:	9b 01       	movw	r18, r22
 ab2:	ac 01       	movw	r20, r24
 ab4:	bd 01       	movw	r22, r26
 ab6:	cf 01       	movw	r24, r30
 ab8:	08 95       	ret

00000aba <__muluhisi3>:
 aba:	09 d0       	rcall	.+18     	; 0xace <__umulhisi3>
 abc:	a5 9f       	mul	r26, r21
 abe:	90 0d       	add	r25, r0
 ac0:	b4 9f       	mul	r27, r20
 ac2:	90 0d       	add	r25, r0
 ac4:	a4 9f       	mul	r26, r20
 ac6:	80 0d       	add	r24, r0
 ac8:	91 1d       	adc	r25, r1
 aca:	11 24       	eor	r1, r1
 acc:	08 95       	ret

00000ace <__umulhisi3>:
 ace:	a2 9f       	mul	r26, r18
 ad0:	b0 01       	movw	r22, r0
 ad2:	b3 9f       	mul	r27, r19
 ad4:	c0 01       	movw	r24, r0
 ad6:	a3 9f       	mul	r26, r19
 ad8:	70 0d       	add	r23, r0
 ada:	81 1d       	adc	r24, r1
 adc:	11 24       	eor	r1, r1
 ade:	91 1d       	adc	r25, r1
 ae0:	b2 9f       	mul	r27, r18
 ae2:	70 0d       	add	r23, r0
 ae4:	81 1d       	adc	r24, r1
 ae6:	11 24       	eor	r1, r1
 ae8:	91 1d       	adc	r25, r1
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
