
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800140  00800140  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123a  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e6  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000581  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a34  00000000  00000000  000030e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ee c0       	rjmp	.+476    	; 0x22a <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 34       	cpi	r26, 0x4A	; 74
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bd d0       	rcall	.+378    	; 0x23e <main>
  c4:	cb c0       	rjmp	.+406    	; 0x25c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	84 b9       	out	0x04, r24	; 4
  ce:	5e 9a       	sbi	0x0b, 6	; 11
  d0:	5b 98       	cbi	0x0b, 3	; 11
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDBusyLoop+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x12>
  da:	40 9a       	sbi	0x08, 0	; 8
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x1c>
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <LCDBusyLoop+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCDBusyLoop+0x2a>
  f2:	40 98       	cbi	0x08, 0	; 8
  f4:	95 e0       	ldi	r25, 0x05	; 5
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x2e>
  fa:	00 00       	nop
  fc:	40 9a       	sbi	0x08, 0	; 8
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <LCDBusyLoop+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDBusyLoop+0x3e>
 106:	93 b1       	in	r25, 0x03	; 3
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCDBusyLoop+0x42>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDBusyLoop+0x48>
 110:	40 98       	cbi	0x08, 0	; 8
 112:	95 e0       	ldi	r25, 0x05	; 5
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDBusyLoop+0x4c>
 118:	00 00       	nop
 11a:	88 23       	and	r24, r24
 11c:	f4 f2       	brlt	.-68     	; 0xda <LCDBusyLoop+0x12>
 11e:	5e 98       	cbi	0x0b, 6	; 11
 120:	84 b1       	in	r24, 0x04	; 4
 122:	8f 60       	ori	r24, 0x0F	; 15
 124:	84 b9       	out	0x04, r24	; 4
 126:	08 95       	ret

00000128 <LCDByte>:
 128:	28 2f       	mov	r18, r24
 12a:	22 95       	swap	r18
 12c:	2f 70       	andi	r18, 0x0F	; 15
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	61 11       	cpse	r22, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <LCDByte+0x10>
 134:	5b 98       	cbi	0x0b, 3	; 11
 136:	01 c0       	rjmp	.+2      	; 0x13a <LCDByte+0x12>
 138:	5b 9a       	sbi	0x0b, 3	; 11
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCDByte+0x14>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCDByte+0x1a>
 142:	40 9a       	sbi	0x08, 0	; 8
 144:	95 b1       	in	r25, 0x05	; 5
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	92 2b       	or	r25, r18
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	95 e0       	ldi	r25, 0x05	; 5
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDByte+0x26>
 152:	00 00       	nop
 154:	40 98       	cbi	0x08, 0	; 8
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDByte+0x30>
 15c:	00 00       	nop
 15e:	40 9a       	sbi	0x08, 0	; 8
 160:	95 b1       	in	r25, 0x05	; 5
 162:	90 7f       	andi	r25, 0xF0	; 240
 164:	89 2b       	or	r24, r25
 166:	85 b9       	out	0x05, r24	; 5
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCDByte+0x42>
 16e:	00 00       	nop
 170:	40 98       	cbi	0x08, 0	; 8
 172:	95 e0       	ldi	r25, 0x05	; 5
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDByte+0x4c>
 178:	00 00       	nop
 17a:	a6 cf       	rjmp	.-180    	; 0xc8 <LCDBusyLoop>
 17c:	08 95       	ret

0000017e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 17e:	84 31       	cpi	r24, 0x14	; 20
 180:	70 f4       	brcc	.+28     	; 0x19e <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	31 f0       	breq	.+12     	; 0x192 <LCDGotoXY+0x14>
 186:	63 30       	cpi	r22, 0x03	; 3
 188:	31 f0       	breq	.+12     	; 0x196 <LCDGotoXY+0x18>
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	29 f4       	brne	.+10     	; 0x198 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 18e:	80 64       	ori	r24, 0x40	; 64
			break;
 190:	03 c0       	rjmp	.+6      	; 0x198 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 192:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 194:	01 c0       	rjmp	.+2      	; 0x198 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 196:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	c5 cf       	rjmp	.-118    	; 0x128 <LCDByte>
 19e:	08 95       	ret

000001a0 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	86 e7       	ldi	r24, 0x76	; 118
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <LCDInit+0x10>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCDInit+0x1a>
 1ba:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	8f 60       	ori	r24, 0x0F	; 15
 1c0:	84 b9       	out	0x04, r24	; 4
	LCD_E_DDR|=(1<<LCD_E_POS);
 1c2:	38 9a       	sbi	0x07, 0	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1c4:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1c6:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	85 b9       	out	0x05, r24	; 5
	CLEAR_E();
 1ce:	40 98       	cbi	0x08, 0	; 8
	CLEAR_RW();
 1d0:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 1d2:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCDInit+0x36>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCDInit+0x38>
 1d8:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1da:	40 9a       	sbi	0x08, 0	; 8
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1dc:	29 9a       	sbi	0x05, 1	; 5
 1de:	25 e0       	ldi	r18, 0x05	; 5
 1e0:	2a 95       	dec	r18
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCDInit+0x40>
 1e4:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 1e6:	40 98       	cbi	0x08, 0	; 8
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDInit+0x4a>
 1ee:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1f0:	6b df       	rcall	.-298    	; 0xc8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	8c 2f       	mov	r24, r28
 1f6:	8c 60       	ori	r24, 0x0C	; 12
 1f8:	97 df       	rcall	.-210    	; 0x128 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	94 df       	rcall	.-216    	; 0x128 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	91 df       	rcall	.-222    	; 0x128 <LCDByte>
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d1 e0       	ldi	r29, 0x01	; 1
 20a:	00 e4       	ldi	r16, 0x40	; 64
 20c:	11 e0       	ldi	r17, 0x01	; 1

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	89 91       	ld	r24, Y+
 212:	8a df       	rcall	.-236    	; 0x128 <LCDByte>
 214:	c0 17       	cp	r28, r16

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 216:	d1 07       	cpc	r29, r17
 218:	d1 f7       	brne	.-12     	; 0x20e <LCDInit+0x6e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	af df       	rcall	.-162    	; 0x17e <LCDGotoXY>
 220:	df 91       	pop	r29

}
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <__vector_19>:
 22a:	1f 92       	push	r1
	(uint32_t)input[3];
	return num;
}

//Spi interrupt routine
ISR(SPI_STC_vect){
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1

}
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:

int main(void)
{
	//enabling interrupts
	sei();
 23e:	78 94       	sei
	
   //Initialize LCD module
   LCDInit(LS_BLINK | LS_ULINE);
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	ae df       	rcall	.-164    	; 0x1a0 <LCDInit>
   
   //Clear the screen
   LCDClear();
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
   
	//initialize spi
	spi_init_spi();
 248:	6f df       	rcall	.-290    	; 0x128 <LCDByte>
 24a:	01 d0       	rcall	.+2      	; 0x24e <spi_init_spi>
 24c:	ff cf       	rjmp	.-2      	; 0x24c <main+0xe>

0000024e <spi_init_spi>:
}

// Initialize SPI Slave Device
void spi_init_spi (void)
{
	DDRB = (1 << DDB6);			//Set MISO as output
 24e:	80 e4       	ldi	r24, 0x40	; 64
 250:	84 b9       	out	0x04, r24	; 4
	SPCR=(1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
 252:	80 ec       	ldi	r24, 0xC0	; 192
 254:	8c bd       	out	0x2c, r24	; 44
	buffer.lapsensor = 0;
 256:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x4>
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
