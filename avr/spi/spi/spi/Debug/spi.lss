
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c2  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a71  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fa  00000000  00000000  00001f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000959  00000000  00000000  00002c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000035e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 34       	cpi	r26, 0x46	; 70
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	e8 d0       	rcall	.+464    	; 0x284 <main>
  b4:	02 c1       	rjmp	.+516    	; 0x2ba <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	84 b9       	out	0x04, r24	; 4
  be:	5e 9a       	sbi	0x0b, 6	; 11
  c0:	5b 98       	cbi	0x0b, 3	; 11
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCDBusyLoop+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCDBusyLoop+0x12>
  ca:	2c 9a       	sbi	0x05, 4	; 5
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <LCDBusyLoop+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x1c>
  d4:	83 b1       	in	r24, 0x03	; 3
  d6:	82 95       	swap	r24
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCDBusyLoop+0x24>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCDBusyLoop+0x2a>
  e2:	2c 98       	cbi	0x05, 4	; 5
  e4:	95 e0       	ldi	r25, 0x05	; 5
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCDBusyLoop+0x2e>
  ea:	00 00       	nop
  ec:	2c 9a       	sbi	0x05, 4	; 5
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCDBusyLoop+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCDBusyLoop+0x3e>
  f6:	93 b1       	in	r25, 0x03	; 3
  f8:	92 e0       	ldi	r25, 0x02	; 2
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCDBusyLoop+0x42>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCDBusyLoop+0x48>
 100:	2c 98       	cbi	0x05, 4	; 5
 102:	95 e0       	ldi	r25, 0x05	; 5
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDBusyLoop+0x4c>
 108:	00 00       	nop
 10a:	88 23       	and	r24, r24
 10c:	f4 f2       	brlt	.-68     	; 0xca <LCDBusyLoop+0x12>
 10e:	5e 98       	cbi	0x0b, 6	; 11
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	84 b9       	out	0x04, r24	; 4
 116:	08 95       	ret

00000118 <LCDByte>:
 118:	28 2f       	mov	r18, r24
 11a:	22 95       	swap	r18
 11c:	2f 70       	andi	r18, 0x0F	; 15
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	61 11       	cpse	r22, r1
 122:	02 c0       	rjmp	.+4      	; 0x128 <LCDByte+0x10>
 124:	5b 98       	cbi	0x0b, 3	; 11
 126:	01 c0       	rjmp	.+2      	; 0x12a <LCDByte+0x12>
 128:	5b 9a       	sbi	0x0b, 3	; 11
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDByte+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDByte+0x1a>
 132:	2c 9a       	sbi	0x05, 4	; 5
 134:	95 b1       	in	r25, 0x05	; 5
 136:	90 7f       	andi	r25, 0xF0	; 240
 138:	92 2b       	or	r25, r18
 13a:	95 b9       	out	0x05, r25	; 5
 13c:	95 e0       	ldi	r25, 0x05	; 5
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <LCDByte+0x26>
 142:	00 00       	nop
 144:	2c 98       	cbi	0x05, 4	; 5
 146:	95 e0       	ldi	r25, 0x05	; 5
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDByte+0x30>
 14c:	00 00       	nop
 14e:	2c 9a       	sbi	0x05, 4	; 5
 150:	95 b1       	in	r25, 0x05	; 5
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	85 b9       	out	0x05, r24	; 5
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCDByte+0x42>
 15e:	00 00       	nop
 160:	2c 98       	cbi	0x05, 4	; 5
 162:	95 e0       	ldi	r25, 0x05	; 5
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDByte+0x4c>
 168:	00 00       	nop
 16a:	a6 cf       	rjmp	.-180    	; 0xb8 <LCDBusyLoop>
 16c:	08 95       	ret

0000016e <LCDWriteString>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	e9 f0       	breq	.+58     	; 0x1ba <LCDWriteString+0x4c>
 180:	85 32       	cpi	r24, 0x25	; 37
 182:	91 f4       	brne	.+36     	; 0x1a8 <LCDWriteString+0x3a>
 184:	e8 01       	movw	r28, r16
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	f8 01       	movw	r30, r16
 18a:	81 81       	ldd	r24, Z+1	; 0x01
 18c:	80 53       	subi	r24, 0x30	; 48
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	18 f4       	brcc	.+6      	; 0x198 <LCDWriteString+0x2a>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	c1 df       	rcall	.-126    	; 0x118 <LCDByte>
 196:	0b c0       	rjmp	.+22     	; 0x1ae <LCDWriteString+0x40>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	85 e2       	ldi	r24, 0x25	; 37
 19c:	bd df       	rcall	.-134    	; 0x118 <LCDByte>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	f8 01       	movw	r30, r16
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	b9 df       	rcall	.-142    	; 0x118 <LCDByte>
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCDWriteString+0x40>
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	b6 df       	rcall	.-148    	; 0x118 <LCDByte>
 1ac:	e8 01       	movw	r28, r16
 1ae:	8e 01       	movw	r16, r28
 1b0:	0f 5f       	subi	r16, 0xFF	; 255
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	81 11       	cpse	r24, r1
 1b8:	e3 cf       	rjmp	.-58     	; 0x180 <LCDWriteString+0x12>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 1c4:	84 31       	cpi	r24, 0x14	; 20
 1c6:	70 f4       	brcc	.+28     	; 0x1e4 <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 1c8:	62 30       	cpi	r22, 0x02	; 2
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <LCDGotoXY+0x14>
 1cc:	63 30       	cpi	r22, 0x03	; 3
 1ce:	31 f0       	breq	.+12     	; 0x1dc <LCDGotoXY+0x18>
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 1d4:	80 64       	ori	r24, 0x40	; 64
			break;
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 1d8:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 1dc:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	9a cf       	rjmp	.-204    	; 0x118 <LCDByte>
 1e4:	08 95       	ret

000001e6 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	86 e7       	ldi	r24, 0x76	; 118
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <LCDInit+0x10>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCDInit+0x1a>
 200:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 202:	84 b1       	in	r24, 0x04	; 4
 204:	8f 60       	ori	r24, 0x0F	; 15
 206:	84 b9       	out	0x04, r24	; 4
	LCD_E_DDR|=(1<<LCD_E_POS);
 208:	24 9a       	sbi	0x04, 4	; 4
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 20a:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 20c:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	85 b9       	out	0x05, r24	; 5
	CLEAR_E();
 214:	2c 98       	cbi	0x05, 4	; 5
	CLEAR_RW();
 216:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 218:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCDInit+0x36>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCDInit+0x38>
 21e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 220:	2c 9a       	sbi	0x05, 4	; 5
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 222:	29 9a       	sbi	0x05, 1	; 5
 224:	25 e0       	ldi	r18, 0x05	; 5
 226:	2a 95       	dec	r18
 228:	f1 f7       	brne	.-4      	; 0x226 <LCDInit+0x40>
 22a:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 22c:	2c 98       	cbi	0x05, 4	; 5
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <LCDInit+0x4a>
 234:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 236:	40 df       	rcall	.-384    	; 0xb8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	8c 2f       	mov	r24, r28
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	6c df       	rcall	.-296    	; 0x118 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	88 e2       	ldi	r24, 0x28	; 40
 244:	69 df       	rcall	.-302    	; 0x118 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	66 df       	rcall	.-308    	; 0x118 <LCDByte>
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e4       	ldi	r16, 0x40	; 64
 252:	11 e0       	ldi	r17, 0x01	; 1

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	89 91       	ld	r24, Y+
 258:	5f df       	rcall	.-322    	; 0x118 <LCDByte>
 25a:	c0 17       	cp	r28, r16

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 25c:	d1 07       	cpc	r29, r17
 25e:	d1 f7       	brne	.-12     	; 0x254 <LCDInit+0x6e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	af df       	rcall	.-162    	; 0x1c4 <LCDGotoXY>
 266:	df 91       	pop	r29

}
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <spi_init_slave>:
#include "myutils.h"

// Initialize SPI Slave Device
void spi_init_slave (void)
{
	DDRB = (1<<6);     //MISO as OUTPUT
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE);   //Enable SPI
 274:	8c bd       	out	0x2c, r24	; 44
 276:	08 95       	ret

00000278 <spi_tranceiver>:

//Function to send and receive data for both master and slave
unsigned char spi_tranceiver (char data)
{
	// Load data into the buffer
	SPDR = data;
 278:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
 27a:	0d b4       	in	r0, 0x2d	; 45
 27c:	07 fe       	sbrs	r0, 7
 27e:	fd cf       	rjmp	.-6      	; 0x27a <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
 280:	8e b5       	in	r24, 0x2e	; 46
}
 282:	08 95       	ret

00000284 <main>:

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	aa df       	rcall	.-172    	; 0x1e6 <LCDInit>
   
   //Clear the screen
   LCDClear();
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
   
	//initialize spi
	spi_init_slave();
 296:	40 df       	rcall	.-384    	; 0x118 <LCDByte>
	LCDWriteString("Slave");
 298:	eb df       	rcall	.-42     	; 0x270 <spi_init_slave>
 29a:	80 e4       	ldi	r24, 0x40	; 64
 29c:	91 e0       	ldi	r25, 0x01	; 1
   
   char num = 0;
   char recieved = 0;
 29e:	67 df       	rcall	.-306    	; 0x16e <LCDWriteString>
   
	//initialize spi
	spi_init_slave();
	LCDWriteString("Slave");
   
   char num = 0;
 2a0:	19 82       	std	Y+1, r1	; 0x01
   char recieved = 0;
	while (1){
		recieved = spi_tranceiver(num);
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	81 2f       	mov	r24, r17
 2a6:	e8 df       	rcall	.-48     	; 0x278 <spi_tranceiver>
		num++;
 2a8:	89 83       	std	Y+1, r24	; 0x01
		LCDClear();
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
		LCDWriteString(&recieved);
 2b0:	33 df       	rcall	.-410    	; 0x118 <LCDByte>
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	5b df       	rcall	.-330    	; 0x16e <LCDWriteString>
 2b8:	f5 cf       	rjmp	.-22     	; 0x2a4 <main+0x20>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
