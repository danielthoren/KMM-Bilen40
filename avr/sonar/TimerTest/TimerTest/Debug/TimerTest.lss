
TimerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000002f0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b4  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7c  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000708  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d3  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000342d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	e0 d0       	rcall	.+448    	; 0x274 <main>
  b4:	1b c1       	rjmp	.+566    	; 0x2ec <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCDBusyLoop>:
	{
		LCDData(*msg);
	}
	msg++;
 }
}
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	84 b9       	out	0x04, r24	; 4
  be:	5e 9a       	sbi	0x0b, 6	; 11
  c0:	5b 98       	cbi	0x0b, 3	; 11
  c2:	00 00       	nop
  c4:	2c 9a       	sbi	0x05, 4	; 5
  c6:	00 00       	nop
  c8:	83 b1       	in	r24, 0x03	; 3
  ca:	82 95       	swap	r24
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	00 00       	nop
  d0:	2c 98       	cbi	0x05, 4	; 5
  d2:	00 00       	nop
  d4:	2c 9a       	sbi	0x05, 4	; 5
  d6:	00 00       	nop
  d8:	93 b1       	in	r25, 0x03	; 3
  da:	00 00       	nop
  dc:	2c 98       	cbi	0x05, 4	; 5
  de:	00 00       	nop
  e0:	88 23       	and	r24, r24
  e2:	84 f3       	brlt	.-32     	; 0xc4 <LCDBusyLoop+0xc>
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	8f 60       	ori	r24, 0x0F	; 15
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	08 95       	ret

000000ee <LCDByte>:
  ee:	28 2f       	mov	r18, r24
  f0:	22 95       	swap	r18
  f2:	2f 70       	andi	r18, 0x0F	; 15
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	61 11       	cpse	r22, r1
  f8:	02 c0       	rjmp	.+4      	; 0xfe <LCDByte+0x10>
  fa:	5b 98       	cbi	0x0b, 3	; 11
  fc:	01 c0       	rjmp	.+2      	; 0x100 <LCDByte+0x12>
  fe:	5b 9a       	sbi	0x0b, 3	; 11
 100:	00 00       	nop
 102:	2c 9a       	sbi	0x05, 4	; 5
 104:	95 b1       	in	r25, 0x05	; 5
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	92 2b       	or	r25, r18
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	00 00       	nop
 10e:	2c 98       	cbi	0x05, 4	; 5
 110:	00 00       	nop
 112:	2c 9a       	sbi	0x05, 4	; 5
 114:	95 b1       	in	r25, 0x05	; 5
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	89 2b       	or	r24, r25
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	00 00       	nop
 11e:	2c 98       	cbi	0x05, 4	; 5
 120:	00 00       	nop
 122:	ca cf       	rjmp	.-108    	; 0xb8 <LCDBusyLoop>
 124:	08 95       	ret

00000126 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	00 d0       	rcall	.+0      	; 0x134 <LCDWriteInt+0xe>
 134:	00 d0       	rcall	.+0      	; 0x136 <LCDWriteInt+0x10>
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 13e:	fe 01       	movw	r30, r28
 140:	31 96       	adiw	r30, 0x01	; 1
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	df 01       	movw	r26, r30
 146:	1d 92       	st	X+, r1
 148:	2a 95       	dec	r18
 14a:	e9 f7       	brne	.-6      	; 0x146 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	51 f0       	breq	.+20     	; 0x164 <LCDWriteInt+0x3e>
 150:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 152:	2a e0       	ldi	r18, 0x0A	; 10
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	a2 d0       	rcall	.+324    	; 0x29e <__divmodhi4>
 15a:	82 93       	st	-Z, r24
	val=val/10;
 15c:	86 2f       	mov	r24, r22
 15e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	c9 f7       	brne	.-14     	; 0x156 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 164:	bf ef       	ldi	r27, 0xFF	; 255
 166:	eb 16       	cp	r14, r27
 168:	fb 06       	cpc	r15, r27
 16a:	69 f4       	brne	.+26     	; 0x186 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	81 11       	cpse	r24, r1
 170:	1d c0       	rjmp	.+58     	; 0x1ac <LCDWriteInt+0x86>
 172:	fe 01       	movw	r30, r28
 174:	32 96       	adiw	r30, 0x02	; 2
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	0f 5f       	subi	r16, 0xFF	; 255
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
 17e:	81 91       	ld	r24, Z+
 180:	88 23       	and	r24, r24
 182:	d9 f3       	breq	.-10     	; 0x17a <LCDWriteInt+0x54>
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 186:	05 e0       	ldi	r16, 0x05	; 5
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	0e 19       	sub	r16, r14
 18c:	1f 09       	sbc	r17, r15
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 190:	f8 01       	movw	r30, r16
 192:	81 91       	ld	r24, Z+
 194:	8f 01       	movw	r16, r30
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	a9 df       	rcall	.-174    	; 0xee <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 19c:	0e 15       	cp	r16, r14
 19e:	1f 05       	cpc	r17, r15
 1a0:	b9 f7       	brne	.-18     	; 0x190 <LCDWriteInt+0x6a>
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <LCDWriteInt+0xa0>
 1a4:	05 30       	cpi	r16, 0x05	; 5
 1a6:	11 05       	cpc	r17, r1
 1a8:	1c f0       	brlt	.+6      	; 0x1b0 <LCDWriteInt+0x8a>
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	8c 0f       	add	r24, r28
 1b6:	9d 1f       	adc	r25, r29
 1b8:	08 0f       	add	r16, r24
 1ba:	19 1f       	adc	r17, r25
 1bc:	7e 01       	movw	r14, r28
 1be:	96 e0       	ldi	r25, 0x06	; 6
 1c0:	e9 0e       	add	r14, r25
 1c2:	f1 1c       	adc	r15, r1
 1c4:	e5 cf       	rjmp	.-54     	; 0x190 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 1de:	84 31       	cpi	r24, 0x14	; 20
 1e0:	70 f4       	brcc	.+28     	; 0x1fe <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 1e2:	62 30       	cpi	r22, 0x02	; 2
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <LCDGotoXY+0x14>
 1e6:	63 30       	cpi	r22, 0x03	; 3
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <LCDGotoXY+0x18>
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	29 f4       	brne	.+10     	; 0x1f8 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 1ee:	80 64       	ori	r24, 0x40	; 64
			break;
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 1f2:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 1f6:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	78 cf       	rjmp	.-272    	; 0xee <LCDByte>
 1fe:	08 95       	ret

00000200 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8b e4       	ldi	r24, 0x4B	; 75
 20c:	9d e1       	ldi	r25, 0x1D	; 29
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDInit+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCDInit+0x14>
 214:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 216:	84 b1       	in	r24, 0x04	; 4
 218:	8f 60       	ori	r24, 0x0F	; 15
 21a:	84 b9       	out	0x04, r24	; 4
	LCD_E_DDR|=(1<<LCD_E_POS);
 21c:	24 9a       	sbi	0x04, 4	; 4
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 21e:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 220:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 222:	85 b1       	in	r24, 0x05	; 5
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	85 b9       	out	0x05, r24	; 5
	CLEAR_E();
 228:	2c 98       	cbi	0x05, 4	; 5
	CLEAR_RW();
 22a:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 22c:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 230:	2c 9a       	sbi	0x05, 4	; 5
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 232:	29 9a       	sbi	0x05, 1	; 5
 234:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 236:	2c 98       	cbi	0x05, 4	; 5
 238:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 23a:	3e df       	rcall	.-388    	; 0xb8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	8c 2f       	mov	r24, r28
 240:	8c 60       	ori	r24, 0x0C	; 12
 242:	55 df       	rcall	.-342    	; 0xee <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	52 df       	rcall	.-348    	; 0xee <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	80 e4       	ldi	r24, 0x40	; 64
 24e:	4f df       	rcall	.-354    	; 0xee <LCDByte>
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	d1 e0       	ldi	r29, 0x01	; 1
 254:	00 e4       	ldi	r16, 0x40	; 64
 256:	11 e0       	ldi	r17, 0x01	; 1

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	89 91       	ld	r24, Y+
 25c:	48 df       	rcall	.-368    	; 0xee <LCDByte>
 25e:	c0 17       	cp	r28, r16

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 260:	d1 07       	cpc	r29, r17
 262:	d1 f7       	brne	.-12     	; 0x258 <LCDInit+0x58>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	ba df       	rcall	.-140    	; 0x1de <LCDGotoXY>
 26a:	df 91       	pop	r29

}
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <main>:
#define F_CPU 16000000
int main(void)
{
	
	 //Initialize LCD module
	 LCDInit(LS_ULINE);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	c4 df       	rcall	.-120    	; 0x200 <LCDInit>
	 
	 //Clear the screen
	 LCDClear();
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	38 df       	rcall	.-400    	; 0xee <LCDByte>
	 
	 // Raknare=0
	 TCNT0=0;
 27e:	16 bc       	out	0x26, r1	; 38
	 
	 //Turn on counter
	 TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00);
 280:	85 b5       	in	r24, 0x25	; 37
 282:	85 60       	ori	r24, 0x05	; 5
 284:	85 bd       	out	0x25, r24	; 37
	 
	 int32_t pulse;
	 
    while (1) 
    {
		pulse=TCNT0;
 286:	86 b5       	in	r24, 0x26	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	e3 ec       	ldi	r30, 0xC3	; 195
 28a:	f9 e0       	ldi	r31, 0x09	; 9
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x18>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x1e>
 292:	00 00       	nop
		_delay_ms(10);
		LCDWriteInt(pulse, 4);
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	45 df       	rcall	.-374    	; 0x126 <LCDWriteInt>
 29c:	f4 cf       	rjmp	.-24     	; 0x286 <main+0x12>

0000029e <__divmodhi4>:
 29e:	97 fb       	bst	r25, 7
 2a0:	07 2e       	mov	r0, r23
 2a2:	16 f4       	brtc	.+4      	; 0x2a8 <__divmodhi4+0xa>
 2a4:	00 94       	com	r0
 2a6:	06 d0       	rcall	.+12     	; 0x2b4 <__divmodhi4_neg1>
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	08 d0       	rcall	.+16     	; 0x2bc <__divmodhi4_neg2>
 2ac:	0b d0       	rcall	.+22     	; 0x2c4 <__udivmodhi4>
 2ae:	07 fc       	sbrc	r0, 7
 2b0:	05 d0       	rcall	.+10     	; 0x2bc <__divmodhi4_neg2>
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__divmodhi4_exit>

000002b4 <__divmodhi4_neg1>:
 2b4:	90 95       	com	r25
 2b6:	81 95       	neg	r24
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <__divmodhi4_neg2>:
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255

000002c2 <__divmodhi4_exit>:
 2c2:	08 95       	ret

000002c4 <__udivmodhi4>:
 2c4:	aa 1b       	sub	r26, r26
 2c6:	bb 1b       	sub	r27, r27
 2c8:	51 e1       	ldi	r21, 0x11	; 17
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__udivmodhi4_ep>

000002cc <__udivmodhi4_loop>:
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	a6 17       	cp	r26, r22
 2d2:	b7 07       	cpc	r27, r23
 2d4:	10 f0       	brcs	.+4      	; 0x2da <__udivmodhi4_ep>
 2d6:	a6 1b       	sub	r26, r22
 2d8:	b7 0b       	sbc	r27, r23

000002da <__udivmodhi4_ep>:
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	5a 95       	dec	r21
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <__udivmodhi4_loop>
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
