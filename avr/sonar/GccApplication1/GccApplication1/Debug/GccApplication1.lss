
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b51  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e1  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	e3 c0       	rjmp	.+454    	; 0x1e4 <__vector_7>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fc c0       	rjmp	.+504    	; 0x236 <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	0f c1       	rjmp	.+542    	; 0x2ca <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

int main(void)
{

		
		DDRD = 0b00010000;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0xe>
  bc:	00 00       	nop
		_delay_ms(10);
		//Pins is now an output
		DDRC = 0b00000001;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	87 b9       	out	0x07, r24	; 7
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9c e9       	ldi	r25, 0x9C	; 156
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x18>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x1e>
  cc:	00 00       	nop
		_delay_ms(10);
		PORTD |= _BV(0);
  ce:	58 9a       	sbi	0x0b, 0	; 11
		
		
		//Turn on interrupt on PCMSK2 pins
		PCICR |= _BV(3);
  d0:	e8 e6       	ldi	r30, 0x68	; 104
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
		//Theses pins now trigger an interrupt
		PCMSK3 |= _BV(0);
  da:	e3 e7       	ldi	r30, 0x73	; 115
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24

		TCCR0B = 0;
  e4:	15 bc       	out	0x25, r1	; 37
	//Turn on global interrupt
	sei();
  e6:	78 94       	sei
			if( mode == 0){
			//Triggerpin is high for 15uS
			PORTD|=_BV(4);
			_delay_us(15);
			PORTD &= ~_BV(4);
			mode = 1;
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x42>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x48>
  f6:	00 00       	nop
	
	
	while(1 == 1)
	{
			_delay_ms(10);
			if( mode == 0){
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 100:	89 2b       	or	r24, r25
 102:	a1 f7       	brne	.-24     	; 0xec <main+0x3e>
			//Triggerpin is high for 15uS
			PORTD|=_BV(4);
 104:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	90 e5       	ldi	r25, 0x50	; 80
 108:	9a 95       	dec	r25
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x5a>
			_delay_us(15);
			PORTD &= ~_BV(4);
 10c:	5c 98       	cbi	0x0b, 4	; 11
			mode = 1;
 10e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 112:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x6c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x72>
 120:	00 00       	nop
 122:	e4 cf       	rjmp	.-56     	; 0xec <main+0x3e>

00000124 <calc_sonar_data>:
				mode = 0;
				
	}
}

void calc_sonar_data(int sonar_nr, int32_t pulse){
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	6a 01       	movw	r12, r20
 12e:	7b 01       	movw	r14, r22
	int cm;
	cm = (pulse*64)/58;
 130:	db 01       	movw	r26, r22
 132:	ca 01       	movw	r24, r20
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	aa 1f       	adc	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	aa 1f       	adc	r26, r26
 14a:	bb 1f       	adc	r27, r27
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	bc 01       	movw	r22, r24
 156:	cd 01       	movw	r24, r26
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	88 1f       	adc	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	2a e3       	ldi	r18, 0x3A	; 58
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	6e d0       	rcall	.+220    	; 0x24e <__divmodsi4>
	if (pulse <= 200){
 172:	89 ec       	ldi	r24, 0xC9	; 201
 174:	c8 16       	cp	r12, r24
 176:	d1 04       	cpc	r13, r1
 178:	e1 04       	cpc	r14, r1
 17a:	f1 04       	cpc	r15, r1
 17c:	0c f4       	brge	.+2      	; 0x180 <calc_sonar_data+0x5c>
		blue_led_off();
 17e:	40 98       	cbi	0x08, 0	; 8
	}
	sonar_data= cm;
 180:	c9 01       	movw	r24, r18
 182:	33 0f       	add	r19, r19
 184:	aa 0b       	sbc	r26, r26
 186:	bb 0b       	sbc	r27, r27
 188:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sonar_data>
 18c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <sonar_data+0x1>
 190:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <sonar_data+0x2>
 194:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <sonar_data+0x3>
}
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	08 95       	ret

000001a2 <sonar_timer_interrupt>:
}



void sonar_timer_interrupt(int sonar_nr){
	if( (PIND & (1 << PIND0)) == 1)
 1a2:	48 9b       	sbis	0x09, 0	; 9
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <sonar_timer_interrupt+0x1c>
	{
		blue_led_on();
 1a6:	40 9a       	sbi	0x08, 0	; 8
			// Raknare=0
			TCNT0=0;
 1a8:	16 bc       	out	0x26, r1	; 38
			
			//Turn on counter
			TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00);
 1aa:	85 b5       	in	r24, 0x25	; 37
 1ac:	85 60       	ori	r24, 0x05	; 5
 1ae:	85 bd       	out	0x25, r24	; 37
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <sonar_timer_interrupt+0x12>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <sonar_timer_interrupt+0x18>
 1ba:	00 00       	nop
 1bc:	08 95       	ret
			_delay_ms(10);}
			
	else{
				//Stops conter
				TCCR0B=0;
 1be:	15 bc       	out	0x25, r1	; 37
				int32_t pulse=TCNT0;
 1c0:	46 b5       	in	r20, 0x26	; 38
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <sonar_timer_interrupt+0x24>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <sonar_timer_interrupt+0x2a>
 1cc:	00 00       	nop
				
				_delay_ms(10);
				calc_sonar_data(0, pulse);
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	a5 df       	rcall	.-182    	; 0x124 <calc_sonar_data>
				mode = 0;
 1da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1e2:	08 95       	ret

000001e4 <__vector_7>:

	}
}
//Interrupt function
ISR(PCINT3_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	0b b6       	in	r0, 0x3b	; 59
 1f0:	0f 92       	push	r0
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31

	sonar_timer_interrupt(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	c9 df       	rcall	.-110    	; 0x1a2 <sonar_timer_interrupt>
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0b be       	out	0x3b, r0	; 59
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_15>:
}


//Take too long time too get data, reset
ISR (TIMER1_OVF_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
	//Stops counter
	TCCR1B=0;
 240:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//////////////////////////////////////////
	//Reset everything
	//////////////////////////////////////////
}
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__divmodsi4>:
 24e:	05 2e       	mov	r0, r21
 250:	97 fb       	bst	r25, 7
 252:	16 f4       	brtc	.+4      	; 0x258 <__divmodsi4+0xa>
 254:	00 94       	com	r0
 256:	0f d0       	rcall	.+30     	; 0x276 <__negsi2>
 258:	57 fd       	sbrc	r21, 7
 25a:	05 d0       	rcall	.+10     	; 0x266 <__divmodsi4_neg2>
 25c:	14 d0       	rcall	.+40     	; 0x286 <__udivmodsi4>
 25e:	07 fc       	sbrc	r0, 7
 260:	02 d0       	rcall	.+4      	; 0x266 <__divmodsi4_neg2>
 262:	46 f4       	brtc	.+16     	; 0x274 <__divmodsi4_exit>
 264:	08 c0       	rjmp	.+16     	; 0x276 <__negsi2>

00000266 <__divmodsi4_neg2>:
 266:	50 95       	com	r21
 268:	40 95       	com	r20
 26a:	30 95       	com	r19
 26c:	21 95       	neg	r18
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	4f 4f       	sbci	r20, 0xFF	; 255
 272:	5f 4f       	sbci	r21, 0xFF	; 255

00000274 <__divmodsi4_exit>:
 274:	08 95       	ret

00000276 <__negsi2>:
 276:	90 95       	com	r25
 278:	80 95       	com	r24
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	8f 4f       	sbci	r24, 0xFF	; 255
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	08 95       	ret

00000286 <__udivmodsi4>:
 286:	a1 e2       	ldi	r26, 0x21	; 33
 288:	1a 2e       	mov	r1, r26
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	fd 01       	movw	r30, r26
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__udivmodsi4_ep>

00000292 <__udivmodsi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	ee 1f       	adc	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	a2 17       	cp	r26, r18
 29c:	b3 07       	cpc	r27, r19
 29e:	e4 07       	cpc	r30, r20
 2a0:	f5 07       	cpc	r31, r21
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__udivmodsi4_ep>
 2a4:	a2 1b       	sub	r26, r18
 2a6:	b3 0b       	sbc	r27, r19
 2a8:	e4 0b       	sbc	r30, r20
 2aa:	f5 0b       	sbc	r31, r21

000002ac <__udivmodsi4_ep>:
 2ac:	66 1f       	adc	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	1a 94       	dec	r1
 2b6:	69 f7       	brne	.-38     	; 0x292 <__udivmodsi4_loop>
 2b8:	60 95       	com	r22
 2ba:	70 95       	com	r23
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	bd 01       	movw	r22, r26
 2c6:	cf 01       	movw	r24, r30
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
