
Sensormodul2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000652  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  000006c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001021  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab5  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e4  00000000  00000000  000022be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dc  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adf  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003d33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c1       	rjmp	.+760    	; 0x30a <__vector_4>
  12:	00 00       	nop
  14:	a3 c1       	rjmp	.+838    	; 0x35c <__vector_5>
  16:	00 00       	nop
  18:	ca c1       	rjmp	.+916    	; 0x3ae <__vector_6>
  1a:	00 00       	nop
  1c:	f1 c1       	rjmp	.+994    	; 0x400 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	0a c2       	rjmp	.+1044   	; 0x452 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	10 c2       	rjmp	.+1056   	; 0x46e <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3d d0       	rcall	.+122    	; 0x13e <main>
  c4:	c4 c2       	rjmp	.+1416   	; 0x64e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ready_to_send_spi>:

void calc_sonar_data(int sonar, uint32_t pulse){
	uint32_t cm;
	cm = (pulse/480)+2;
	sonar_data[sonar] = cm;
}
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  cc:	85 30       	cpi	r24, 0x05	; 5
  ce:	79 f4       	brne	.+30     	; 0xee <ready_to_send_spi+0x26>
  d0:	f8 94       	cli
  d2:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <data>
  d6:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <data+0x1>
  da:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <data+0x2>
  de:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <data+0x3>
  e2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <data+0x4>
  e6:	66 d2       	rcall	.+1228   	; 0x5b4 <set_outgoing_data>
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <sensor_init>:
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	81 b9       	out	0x01, r24	; 1
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	87 b9       	out	0x07, r24	; 7
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9c e9       	ldi	r25, 0x9C	; 156
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <sensor_init+0xe>
 102:	00 c0       	rjmp	.+0      	; 0x104 <sensor_init+0x14>
 104:	00 00       	nop
 106:	e8 e6       	ldi	r30, 0x68	; 104
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 60       	ori	r24, 0x0F	; 15
 10e:	80 83       	st	Z, r24
 110:	eb e6       	ldi	r30, 0x6B	; 107
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
 11a:	ec e6       	ldi	r30, 0x6C	; 108
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
 124:	ed e6       	ldi	r30, 0x6D	; 109
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	e3 e7       	ldi	r30, 0x73	; 115
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
 138:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 13c:	08 95       	ret

0000013e <main>:
 13e:	d8 df       	rcall	.-80     	; 0xf0 <sensor_init>
 140:	c8 d1       	rcall	.+912    	; 0x4d2 <spi_init>
 142:	78 94       	sei
 144:	c4 e0       	ldi	r28, 0x04	; 4
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x18>
 156:	00 00       	nop
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	71 f0       	breq	.+28     	; 0x17c <main+0x3e>
 160:	28 f0       	brcs	.+10     	; 0x16c <main+0x2e>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	99 f0       	breq	.+38     	; 0x18c <main+0x4e>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	c9 f0       	breq	.+50     	; 0x19c <main+0x5e>
 16a:	1f c0       	rjmp	.+62     	; 0x1aa <main+0x6c>
 16c:	11 9a       	sbi	0x02, 1	; 2
 16e:	20 e5       	ldi	r18, 0x50	; 80
 170:	2a 95       	dec	r18
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x32>
 174:	11 98       	cbi	0x02, 1	; 2
 176:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 17a:	17 c0       	rjmp	.+46     	; 0x1aa <main+0x6c>
 17c:	29 9a       	sbi	0x05, 1	; 5
 17e:	80 e5       	ldi	r24, 0x50	; 80
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x42>
 184:	29 98       	cbi	0x05, 1	; 5
 186:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <main+0x6c>
 18c:	41 9a       	sbi	0x08, 1	; 8
 18e:	90 e5       	ldi	r25, 0x50	; 80
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x52>
 194:	41 98       	cbi	0x08, 1	; 8
 196:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <main+0x6c>
 19c:	59 9a       	sbi	0x0b, 1	; 11
 19e:	20 e5       	ldi	r18, 0x50	; 80
 1a0:	2a 95       	dec	r18
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x62>
 1a4:	59 98       	cbi	0x0b, 1	; 11
 1a6:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 1aa:	8e df       	rcall	.-228    	; 0xc8 <ready_to_send_spi>
 1ac:	cc cf       	rjmp	.-104    	; 0x146 <main+0x8>

000001ae <sonar_timer_interrupt>:
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	91 05       	cpc	r25, r1
 1b2:	b1 f1       	breq	.+108    	; 0x220 <sonar_timer_interrupt+0x72>
 1b4:	1c f4       	brge	.+6      	; 0x1bc <sonar_timer_interrupt+0xe>
 1b6:	89 2b       	or	r24, r25
 1b8:	49 f0       	breq	.+18     	; 0x1cc <sonar_timer_interrupt+0x1e>
 1ba:	08 95       	ret
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <sonar_timer_interrupt+0x16>
 1c2:	58 c0       	rjmp	.+176    	; 0x274 <sonar_timer_interrupt+0xc6>
 1c4:	03 97       	sbiw	r24, 0x03	; 3
 1c6:	09 f4       	brne	.+2      	; 0x1ca <sonar_timer_interrupt+0x1c>
 1c8:	7f c0       	rjmp	.+254    	; 0x2c8 <sonar_timer_interrupt+0x11a>
 1ca:	08 95       	ret
 1cc:	00 9b       	sbis	0x00, 0	; 0
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <sonar_timer_interrupt+0x32>
 1d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1de:	08 95       	ret
 1e0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1e8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <pulse>
 1f4:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <pulse+0x1>
 1f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pulse+0x2>
 1fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pulse+0x3>
 200:	20 ee       	ldi	r18, 0xE0	; 224
 202:	31 e0       	ldi	r19, 0x01	; 1
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	00 d2       	rcall	.+1024   	; 0x60a <__udivmodsi4>
 20a:	da 01       	movw	r26, r20
 20c:	c9 01       	movw	r24, r18
 20e:	02 96       	adiw	r24, 0x02	; 2
 210:	a1 1d       	adc	r26, r1
 212:	b1 1d       	adc	r27, r1
 214:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 21e:	08 95       	ret
 220:	18 9b       	sbis	0x03, 0	; 3
 222:	08 c0       	rjmp	.+16     	; 0x234 <sonar_timer_interrupt+0x86>
 224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 232:	08 95       	ret
 234:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 238:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 23c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <pulse>
 248:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <pulse+0x1>
 24c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pulse+0x2>
 250:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pulse+0x3>
 254:	20 ee       	ldi	r18, 0xE0	; 224
 256:	31 e0       	ldi	r19, 0x01	; 1
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	d6 d1       	rcall	.+940    	; 0x60a <__udivmodsi4>
 25e:	da 01       	movw	r26, r20
 260:	c9 01       	movw	r24, r18
 262:	02 96       	adiw	r24, 0x02	; 2
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 272:	08 95       	ret
 274:	30 9b       	sbis	0x06, 0	; 6
 276:	08 c0       	rjmp	.+16     	; 0x288 <sonar_timer_interrupt+0xda>
 278:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 27c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 286:	08 95       	ret
 288:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 28c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 290:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <pulse>
 29c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <pulse+0x1>
 2a0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pulse+0x2>
 2a4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pulse+0x3>
 2a8:	20 ee       	ldi	r18, 0xE0	; 224
 2aa:	31 e0       	ldi	r19, 0x01	; 1
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	ac d1       	rcall	.+856    	; 0x60a <__udivmodsi4>
 2b2:	da 01       	movw	r26, r20
 2b4:	c9 01       	movw	r24, r18
 2b6:	02 96       	adiw	r24, 0x02	; 2
 2b8:	a1 1d       	adc	r26, r1
 2ba:	b1 1d       	adc	r27, r1
 2bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2c6:	08 95       	ret
 2c8:	89 b1       	in	r24, 0x09	; 9
 2ca:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2ce:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2d2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <pulse>
 2de:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <pulse+0x1>
 2e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pulse+0x2>
 2e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pulse+0x3>
 2ea:	20 ee       	ldi	r18, 0xE0	; 224
 2ec:	31 e0       	ldi	r19, 0x01	; 1
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	8b d1       	rcall	.+790    	; 0x60a <__udivmodsi4>
 2f4:	da 01       	movw	r26, r20
 2f6:	c9 01       	movw	r24, r18
 2f8:	02 96       	adiw	r24, 0x02	; 2
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 308:	08 95       	ret

0000030a <__vector_4>:


ISR(PCINT0_vect){sonar_timer_interrupt(sonar1);}
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0b b6       	in	r0, 0x3b	; 59
 316:	0f 92       	push	r0
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	3c df       	rcall	.-392    	; 0x1ae <sonar_timer_interrupt>
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0b be       	out	0x3b, r0	; 59
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_5>:


ISR(PCINT1_vect){sonar_timer_interrupt(sonar2);}
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	13 df       	rcall	.-474    	; 0x1ae <sonar_timer_interrupt>
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0b be       	out	0x3b, r0	; 59
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_6>:


ISR(PCINT2_vect){sonar_timer_interrupt(sonar3);}
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0b b6       	in	r0, 0x3b	; 59
 3ba:	0f 92       	push	r0
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	ea de       	rcall	.-556    	; 0x1ae <sonar_timer_interrupt>
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0b be       	out	0x3b, r0	; 59
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__vector_7>:


ISR(PCINT3_vect){sonar_timer_interrupt(sonar4);}
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	0b b6       	in	r0, 0x3b	; 59
 40c:	0f 92       	push	r0
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	c1 de       	rcall	.-638    	; 0x1ae <sonar_timer_interrupt>
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_15>:



//Take too long time too get data, reset
ISR (TIMER1_OVF_vect)
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
	//Stops counter
	TCCR1B=0;
 45c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	mode = sonar1;
 460:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
}
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_19>:

ISR(SPI_STC_vect){
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	0b b6       	in	r0, 0x3b	; 59
 47a:	0f 92       	push	r0
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	4f 93       	push	r20
 482:	5f 93       	push	r21
 484:	6f 93       	push	r22
 486:	7f 93       	push	r23
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	af 93       	push	r26
 48e:	bf 93       	push	r27
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31
	spi_tranciever();
 494:	29 d0       	rcall	.+82     	; 0x4e8 <spi_tranciever>
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0b be       	out	0x3b, r0	; 59
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <calc_outgoing_checksum>:
volatile short int tranciever_count=0;
sensormodul_AP_data outgoing_data;
sensormodul_AP_data buffer;

//Calculates a simple XOR checksum for the outgoing package
unsigned char calc_outgoing_checksum(volatile unsigned char data[OUTGOING_PACKET_SIZE - 1]){
 4bc:	fc 01       	movw	r30, r24
 4be:	9c 01       	movw	r18, r24
 4c0:	2b 5f       	subi	r18, 0xFB	; 251
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char checksum = 0;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < (OUTGOING_PACKET_SIZE - 1); i++){
		checksum = checksum ^ data[i];
 4c6:	91 91       	ld	r25, Z+
 4c8:	89 27       	eor	r24, r25
sensormodul_AP_data buffer;

//Calculates a simple XOR checksum for the outgoing package
unsigned char calc_outgoing_checksum(volatile unsigned char data[OUTGOING_PACKET_SIZE - 1]){
	unsigned char checksum = 0;
	for (int i = 0; i < (OUTGOING_PACKET_SIZE - 1); i++){
 4ca:	e2 17       	cp	r30, r18
 4cc:	f3 07       	cpc	r31, r19
 4ce:	d9 f7       	brne	.-10     	; 0x4c6 <calc_outgoing_checksum+0xa>
		checksum = checksum ^ data[i];
	}
	return checksum;
}
 4d0:	08 95       	ret

000004d2 <spi_init>:
}

// Initialize SPI Slave Device
void spi_init (void)
{
	DDRB = (1 << DDB6);			//Set MISO as output
 4d2:	80 e4       	ldi	r24, 0x40	; 64
 4d4:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD0);			//Set pin 0 of PORTD as output, used to tell pi when new data is available
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0b11111110;		//Inits pin 0 of PORTD to 0
 4da:	58 98       	cbi	0x0b, 0	; 11
	SPCR=(1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	8c bd       	out	0x2c, r24	; 44
	buffer.lapsensor = 0xFF;
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <buffer+0x4>
 4e6:	08 95       	ret

000004e8 <spi_tranciever>:
}

//Checks if this is the end of the message, else sends next byte
void spi_tranciever(){
	if (tranciever_count == OUTGOING_PACKET_SIZE){
 4e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tranciever_count>
 4ec:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tranciever_count+0x1>
 4f0:	06 97       	sbiw	r24, 0x06	; 6
 4f2:	21 f5       	brne	.+72     	; 0x53c <spi_tranciever+0x54>
		tranciever_count = 0;
 4f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tranciever_count+0x1>
 4f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tranciever_count>
		PORTD &= 0b11111110;
 4fc:	58 98       	cbi	0x0b, 0	; 11
		if (buffer.lapsensor != 0xFF){
 4fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <buffer+0x4>
 502:	8f 3f       	cpi	r24, 0xFF	; 255
 504:	79 f0       	breq	.+30     	; 0x524 <spi_tranciever+0x3c>
			set_outgoing_data(buffer);
 506:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <buffer>
 50a:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <buffer+0x1>
 50e:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <buffer+0x2>
 512:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <buffer+0x3>
 516:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <buffer+0x4>
 51a:	4c d0       	rcall	.+152    	; 0x5b4 <set_outgoing_data>
			
			buffer.lapsensor = 0xFF;
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <buffer+0x4>
 522:	08 95       	ret
		}
		else{
			set_outgoing(outgoing_data);
 524:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <outgoing_data>
 528:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <outgoing_data+0x1>
 52c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <outgoing_data+0x2>
 530:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <outgoing_data+0x3>
 534:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <outgoing_data+0x4>
 538:	13 c0       	rjmp	.+38     	; 0x560 <set_outgoing>
 53a:	08 95       	ret
		}
	}
	else{
		SPDR = outgoing[tranciever_count];
 53c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <tranciever_count>
 540:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <tranciever_count+0x1>
 544:	e9 5f       	subi	r30, 0xF9	; 249
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	80 81       	ld	r24, Z
 54a:	8e bd       	out	0x2e, r24	; 46
		tranciever_count++;
 54c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tranciever_count>
 550:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tranciever_count+0x1>
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <tranciever_count+0x1>
 55a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tranciever_count>
 55e:	08 95       	ret

00000560 <set_outgoing>:
	}
	return checksum;
}

//converts the data of the incomming 'sensormodul_AP_data' to the 'outgoing' char array
void set_outgoing(sensormodul_AP_data data){
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	00 d0       	rcall	.+0      	; 0x56a <set_outgoing+0xa>
 56a:	00 d0       	rcall	.+0      	; 0x56c <set_outgoing+0xc>
 56c:	1f 92       	push	r1
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	49 83       	std	Y+1, r20	; 0x01
 574:	5a 83       	std	Y+2, r21	; 0x02
 576:	6b 83       	std	Y+3, r22	; 0x03
 578:	7c 83       	std	Y+4, r23	; 0x04
 57a:	8d 83       	std	Y+5, r24	; 0x05
	memcpy((void*) outgoing, (void*) data.sonar_data, 4);
 57c:	07 e0       	ldi	r16, 0x07	; 7
 57e:	11 e0       	ldi	r17, 0x01	; 1
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	9a 81       	ldd	r25, Y+2	; 0x02
 584:	ab 81       	ldd	r26, Y+3	; 0x03
 586:	bc 81       	ldd	r27, Y+4	; 0x04
 588:	f8 01       	movw	r30, r16
 58a:	80 83       	st	Z, r24
 58c:	91 83       	std	Z+1, r25	; 0x01
 58e:	a2 83       	std	Z+2, r26	; 0x02
 590:	b3 83       	std	Z+3, r27	; 0x03
	outgoing[4] = data.lapsensor;
 592:	8d 81       	ldd	r24, Y+5	; 0x05
 594:	84 83       	std	Z+4, r24	; 0x04
			
	outgoing[5] = calc_outgoing_checksum(outgoing);
 596:	c8 01       	movw	r24, r16
 598:	91 df       	rcall	.-222    	; 0x4bc <calc_outgoing_checksum>
 59a:	f8 01       	movw	r30, r16
 59c:	85 83       	std	Z+5, r24	; 0x05
	
	spi_tranciever();
 59e:	a4 df       	rcall	.-184    	; 0x4e8 <spi_tranciever>
 5a0:	0f 90       	pop	r0
}
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <set_outgoing_data>:
 5b4:	cf 93       	push	r28

void set_outgoing_data(sensormodul_AP_data data){
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <set_outgoing_data+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <set_outgoing_data+0x8>
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	49 83       	std	Y+1, r20	; 0x01
 5c4:	5a 83       	std	Y+2, r21	; 0x02
 5c6:	6b 83       	std	Y+3, r22	; 0x03
 5c8:	7c 83       	std	Y+4, r23	; 0x04
 5ca:	8d 83       	std	Y+5, r24	; 0x05
	if ((PINB & 0b00010000) != 0){
 5cc:	1c 9b       	sbis	0x03, 4	; 3
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <set_outgoing_data+0x34>
		set_outgoing(data);
 5d0:	c7 df       	rcall	.-114    	; 0x560 <set_outgoing>
		outgoing_data = data;
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	fe 01       	movw	r30, r28
 5d6:	31 96       	adiw	r30, 0x01	; 1
 5d8:	ac e1       	ldi	r26, 0x1C	; 28
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	01 90       	ld	r0, Z+
 5de:	0d 92       	st	X+, r0
 5e0:	8a 95       	dec	r24
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <set_outgoing_data+0x28>
		
		PORTD |= 0b00000001;
 5e4:	58 9a       	sbi	0x0b, 0	; 11
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <set_outgoing_data+0x46>
	}
	else{
		buffer = data;
 5e8:	85 e0       	ldi	r24, 0x05	; 5
 5ea:	fe 01       	movw	r30, r28
 5ec:	31 96       	adiw	r30, 0x01	; 1
 5ee:	a7 e1       	ldi	r26, 0x17	; 23
 5f0:	b1 e0       	ldi	r27, 0x01	; 1
 5f2:	01 90       	ld	r0, Z+
 5f4:	0d 92       	st	X+, r0
 5f6:	8a 95       	dec	r24
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <set_outgoing_data+0x3e>
	}
}
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <__udivmodsi4>:
 60a:	a1 e2       	ldi	r26, 0x21	; 33
 60c:	1a 2e       	mov	r1, r26
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	fd 01       	movw	r30, r26
 614:	0d c0       	rjmp	.+26     	; 0x630 <__udivmodsi4_ep>

00000616 <__udivmodsi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	ee 1f       	adc	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	a2 17       	cp	r26, r18
 620:	b3 07       	cpc	r27, r19
 622:	e4 07       	cpc	r30, r20
 624:	f5 07       	cpc	r31, r21
 626:	20 f0       	brcs	.+8      	; 0x630 <__udivmodsi4_ep>
 628:	a2 1b       	sub	r26, r18
 62a:	b3 0b       	sbc	r27, r19
 62c:	e4 0b       	sbc	r30, r20
 62e:	f5 0b       	sbc	r31, r21

00000630 <__udivmodsi4_ep>:
 630:	66 1f       	adc	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a 94       	dec	r1
 63a:	69 f7       	brne	.-38     	; 0x616 <__udivmodsi4_loop>
 63c:	60 95       	com	r22
 63e:	70 95       	com	r23
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	bd 01       	movw	r22, r26
 64a:	cf 01       	movw	r24, r30
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
