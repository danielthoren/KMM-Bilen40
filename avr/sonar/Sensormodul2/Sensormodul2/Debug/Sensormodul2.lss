
Sensormodul2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f65  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa5  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071a  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b9  00000000  00000000  000031d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c1       	rjmp	.+804    	; 0x336 <__vector_4>
  12:	00 00       	nop
  14:	b9 c1       	rjmp	.+882    	; 0x388 <__vector_5>
  16:	00 00       	nop
  18:	e0 c1       	rjmp	.+960    	; 0x3da <__vector_6>
  1a:	00 00       	nop
  1c:	07 c2       	rjmp	.+1038   	; 0x42c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	24 c2       	rjmp	.+1096   	; 0x47e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c2       	rjmp	.+1110   	; 0x4a4 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d0       	rcall	.+180    	; 0x178 <main>
  c4:	d4 c2       	rjmp	.+1448   	; 0x66e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ready_to_send_spi>:
		
		}
}

void ready_to_send_spi(){
	if (mode == send_data){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  cc:	85 30       	cpi	r24, 0x05	; 5
  ce:	f1 f4       	brne	.+60     	; 0x10c <ready_to_send_spi+0x44>
		cli();
  d0:	f8 94       	cli
		memcpy((void*) data.sonar_data, (void*) sonar_data, 4);
  d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sonar_data>
  d6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sonar_data+0x1>
  da:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <sonar_data+0x2>
  de:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <sonar_data+0x3>
  e2:	48 2f       	mov	r20, r24
  e4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <data>
  e8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <data+0x1>
  ec:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <data+0x2>
  f0:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <data+0x3>
		set_outgoing_data(data);
  f4:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <data+0x1>
  f8:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <data+0x2>
  fc:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <data+0x3>
 100:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <data+0x4>
 104:	67 d2       	rcall	.+1230   	; 0x5d4 <set_outgoing_data>
		//start over
		mode = sonar1;
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		sei();
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <sensor_init>:
}

void sensor_init(){
	
	//Pins is now an output and input
	DDRA |= 0b00000010;
 10e:	09 9a       	sbi	0x01, 1	; 1
	DDRB |= 0b00000010;
 110:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 0b00000010;
 112:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= 0b00000010;
 114:	51 9a       	sbi	0x0a, 1	; 10
	
	DDRA &= 0b11111110;
 116:	08 98       	cbi	0x01, 0	; 1
	DDRB &= 0b11111110;
 118:	20 98       	cbi	0x04, 0	; 4
	DDRC &= 0b11111110;
 11a:	38 98       	cbi	0x07, 0	; 7
	DDRD &= 0b11111011;
 11c:	52 98       	cbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <sensor_init+0x14>
 126:	00 c0       	rjmp	.+0      	; 0x128 <sensor_init+0x1a>
 128:	00 00       	nop
	
	_delay_ms(10);
	
	
	//Turn on interrupt on PCMSK pins
	PCICR |= _BV(3)| _BV(2)| _BV(1)| _BV(0);
 12a:	e8 e6       	ldi	r30, 0x68	; 104
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	80 83       	st	Z, r24
	//Theses pins now trigger an interrupt
	PCMSK0 |= _BV(0);
 134:	eb e6       	ldi	r30, 0x6B	; 107
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
	PCMSK1 |= _BV(0);
 13e:	ec e6       	ldi	r30, 0x6C	; 108
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
	PCMSK2 |= _BV(0);
 148:	ed e6       	ldi	r30, 0x6D	; 109
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	PCMSK3 |= _BV(2);
 152:	e3 e7       	ldi	r30, 0x73	; 115
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	80 83       	st	Z, r24

	TIMSK1 |= _BV(1);
 15c:	ef e6       	ldi	r30, 0x6F	; 111
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
	OCR1A = 50000;
 166:	80 e5       	ldi	r24, 0x50	; 80
 168:	93 ec       	ldi	r25, 0xC3	; 195
 16a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TCCR1B = 0;
 172:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 176:	08 95       	ret

00000178 <main>:
//Init for sensormodul
void sensor_init();

int main(void)
{
	sensor_init();
 178:	ca df       	rcall	.-108    	; 0x10e <sensor_init>
	//spi_init();
	
	//Enable globel interrupt
	sei();
 17a:	78 94       	sei
				PORTC|=_BV(1);
				_delay_us(15);
				PORTC &= ~_BV(1);
				break;
			case sonar4:
				mode = sensor_active;
 17c:	c4 e0       	ldi	r28, 0x04	; 4
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xa>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x10>
 188:	00 00       	nop
	
	
	while(1 == 1)
	{
		_delay_ms(10);
		switch (mode){
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	d9 f0       	breq	.+54     	; 0x1c8 <main+0x50>
 192:	28 f4       	brcc	.+10     	; 0x19e <main+0x26>
 194:	88 23       	and	r24, r24
 196:	41 f0       	breq	.+16     	; 0x1a8 <main+0x30>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	71 f0       	breq	.+28     	; 0x1b8 <main+0x40>
 19c:	f0 cf       	rjmp	.-32     	; 0x17e <main+0x6>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	d9 f0       	breq	.+54     	; 0x1d8 <main+0x60>
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	09 f1       	breq	.+66     	; 0x1e8 <main+0x70>
 1a6:	eb cf       	rjmp	.-42     	; 0x17e <main+0x6>
			case sonar1:
				mode = sensor_active;
 1a8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
				//Triggerpin is high for 15uS
				PORTA|=_BV(1);
 1ac:	11 9a       	sbi	0x02, 1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	90 e5       	ldi	r25, 0x50	; 80
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x38>
				_delay_us(15);
				PORTA &= ~_BV(1);
 1b4:	11 98       	cbi	0x02, 1	; 2
				break;
 1b6:	e3 cf       	rjmp	.-58     	; 0x17e <main+0x6>
			case sonar2:
				mode = sensor_active;
 1b8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
				//Triggerpin is high for 15uS
				PORTB|=_BV(1);
 1bc:	29 9a       	sbi	0x05, 1	; 5
 1be:	80 e5       	ldi	r24, 0x50	; 80
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x48>
				_delay_us(15);
				PORTB &= ~_BV(1);
 1c4:	29 98       	cbi	0x05, 1	; 5
				break;
 1c6:	db cf       	rjmp	.-74     	; 0x17e <main+0x6>
			case sonar3:
				mode = sensor_active;
 1c8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
				//Triggerpin is high for 15uS
				PORTC|=_BV(1);
 1cc:	41 9a       	sbi	0x08, 1	; 8
 1ce:	90 e5       	ldi	r25, 0x50	; 80
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x58>
				_delay_us(15);
				PORTC &= ~_BV(1);
 1d4:	41 98       	cbi	0x08, 1	; 8
				break;
 1d6:	d3 cf       	rjmp	.-90     	; 0x17e <main+0x6>
			case sonar4:
				mode = sensor_active;
 1d8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
				//Triggerpin is high for 15uS
				PORTD|=_BV(1);
 1dc:	59 9a       	sbi	0x0b, 1	; 11
 1de:	80 e5       	ldi	r24, 0x50	; 80
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x68>
				_delay_us(15);
				PORTD &= ~_BV(1);
 1e4:	59 98       	cbi	0x0b, 1	; 11
				break;
			case sensor_active:
				break;
			case send_data:
				ready_to_send_spi();
 1e6:	cb cf       	rjmp	.-106    	; 0x17e <main+0x6>
 1e8:	6f df       	rcall	.-290    	; 0xc8 <ready_to_send_spi>
				break;
 1ea:	c9 cf       	rjmp	.-110    	; 0x17e <main+0x6>

000001ec <calc_sonar_data>:
			mode = send_data;
		}break;
		}
}

void calc_sonar_data(int sonar, uint32_t pulse){
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
	if (pulse > 50000){
 1f2:	41 35       	cpi	r20, 0x51	; 81
 1f4:	83 ec       	ldi	r24, 0xC3	; 195
 1f6:	58 07       	cpc	r21, r24
 1f8:	61 05       	cpc	r22, r1
 1fa:	71 05       	cpc	r23, r1
 1fc:	28 f0       	brcs	.+10     	; 0x208 <calc_sonar_data+0x1c>
		sonar_data[sonar] = 0xFF;
 1fe:	c3 5f       	subi	r28, 0xF3	; 243
 200:	de 4f       	sbci	r29, 0xFE	; 254
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	88 83       	st	Y, r24
 206:	0a c0       	rjmp	.+20     	; 0x21c <calc_sonar_data+0x30>
	}
	else{
	uint32_t cm;
	cm = (pulse/580);
	sonar_data[sonar] = cm;}
 208:	cb 01       	movw	r24, r22
 20a:	ba 01       	movw	r22, r20
 20c:	24 e4       	ldi	r18, 0x44	; 68
 20e:	32 e0       	ldi	r19, 0x02	; 2
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0a d2       	rcall	.+1044   	; 0x62a <__udivmodsi4>
 216:	c3 5f       	subi	r28, 0xF3	; 243
 218:	de 4f       	sbci	r29, 0xFE	; 254
 21a:	28 83       	st	Y, r18
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <sonar_timer_interrupt>:
}


void sonar_timer_interrupt(int sonar){
	
	switch (sonar)
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	91 05       	cpc	r25, r1
 226:	69 f1       	breq	.+90     	; 0x282 <sonar_timer_interrupt+0x60>
 228:	1c f4       	brge	.+6      	; 0x230 <sonar_timer_interrupt+0xe>
 22a:	89 2b       	or	r24, r25
 22c:	49 f0       	breq	.+18     	; 0x240 <sonar_timer_interrupt+0x1e>
 22e:	08 95       	ret
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	91 05       	cpc	r25, r1
 234:	09 f4       	brne	.+2      	; 0x238 <sonar_timer_interrupt+0x16>
 236:	46 c0       	rjmp	.+140    	; 0x2c4 <sonar_timer_interrupt+0xa2>
 238:	03 97       	sbiw	r24, 0x03	; 3
 23a:	09 f4       	brne	.+2      	; 0x23e <sonar_timer_interrupt+0x1c>
 23c:	64 c0       	rjmp	.+200    	; 0x306 <sonar_timer_interrupt+0xe4>
 23e:	08 95       	ret
	{	case 0:
		//LOW -> HIGH
		if( (PINA & (1 << PINA0)) == 1)
 240:	00 9b       	sbis	0x00, 0	; 0
 242:	08 c0       	rjmp	.+16     	; 0x254 <sonar_timer_interrupt+0x32>
		{
			// Raknare=0
			TCNT1=0;
 244:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 248:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 252:	08 95       	ret
		}
		//HIGh -> LOW
		else{
			//Stops conter
			TCCR1B = (0 << CS12) | (0 << CS11) | (0 << CS10);
 254:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			pulse=TCNT1;
 258:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 25c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <pulse>
 268:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <pulse+0x1>
 26c:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <pulse+0x2>
 270:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <pulse+0x3>
			calc_sonar_data(sonar, pulse);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	b9 df       	rcall	.-142    	; 0x1ec <calc_sonar_data>
			mode = sonar2;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 280:	08 95       	ret
		}break;
		case 1:
		//LOW -> HIGH
		if( (PINB & (1 << PINB0)) == 1)
 282:	18 9b       	sbis	0x03, 0	; 3
 284:	08 c0       	rjmp	.+16     	; 0x296 <sonar_timer_interrupt+0x74>
		{
			// Raknare=0
			TCNT1=0;
 286:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 28a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 294:	08 95       	ret
		}
		//HIGh -> LOW
		else{
			//Stops conter
			TCCR1B = (0 << CS12) | (0 << CS11) | (0 << CS10);
 296:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			pulse=TCNT1;
 29a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 29e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <pulse>
 2aa:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <pulse+0x1>
 2ae:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <pulse+0x2>
 2b2:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <pulse+0x3>
			calc_sonar_data(sonar, pulse);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	98 df       	rcall	.-208    	; 0x1ec <calc_sonar_data>
			mode = sonar3;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2c2:	08 95       	ret
		}break;
		case 2:
		//LOW -> HIGH
		if( (PINC & (1 << PINC0)) == 1)
 2c4:	30 9b       	sbis	0x06, 0	; 6
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <sonar_timer_interrupt+0xb6>
		{
			// Raknare=0
			TCNT1=0;
 2c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2d6:	08 95       	ret
		}
		//HIGh -> LOW
		else{
			//Stops conter
			TCCR1B = (0 << CS12) | (0 << CS11) | (0 << CS10);
 2d8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			pulse=TCNT1;
 2dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <pulse>
 2ec:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <pulse+0x1>
 2f0:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <pulse+0x2>
 2f4:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <pulse+0x3>
			calc_sonar_data(sonar, pulse);
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	77 df       	rcall	.-274    	; 0x1ec <calc_sonar_data>
			mode = sonar4;
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 304:	08 95       	ret
		}break;
		case 3:
		//LOW -> HIGH
		if( (PIND & (1 << PIND2)) == 1)
 306:	89 b1       	in	r24, 0x09	; 9
			TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
		}
		//HIGh -> LOW
		else{
			//Stops conter
			TCCR1B = (0 << CS12) | (0 << CS11) | (0 << CS10);
 308:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			pulse=TCNT1;
 30c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 310:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <pulse>
 31c:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <pulse+0x1>
 320:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <pulse+0x2>
 324:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <pulse+0x3>
			calc_sonar_data(sonar, pulse);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	5f df       	rcall	.-322    	; 0x1ec <calc_sonar_data>
			mode = send_data;
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 334:	08 95       	ret

00000336 <__vector_4>:
	cm = (pulse/580);
	sonar_data[sonar] = cm;}
}


ISR(PCINT0_vect){sonar_timer_interrupt(0);}
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	0b b6       	in	r0, 0x3b	; 59
 342:	0f 92       	push	r0
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	60 df       	rcall	.-320    	; 0x222 <sonar_timer_interrupt>
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0b be       	out	0x3b, r0	; 59
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_5>:


ISR(PCINT1_vect){sonar_timer_interrupt(1);}
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	37 df       	rcall	.-402    	; 0x222 <sonar_timer_interrupt>
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_6>:


ISR(PCINT2_vect){sonar_timer_interrupt(2);}
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	0f 92       	push	r0
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e df       	rcall	.-484    	; 0x222 <sonar_timer_interrupt>
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0b be       	out	0x3b, r0	; 59
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_7>:


ISR(PCINT3_vect){sonar_timer_interrupt(3);}
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	0b b6       	in	r0, 0x3b	; 59
 438:	0f 92       	push	r0
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	e5 de       	rcall	.-566    	; 0x222 <sonar_timer_interrupt>
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0b be       	out	0x3b, r0	; 59
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_13>:



//Take too long time too get data, reset
ISR (TIMER1_COMPA_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
	//Stops counter
	TCCR1B=0;
 48a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	mode = mode + 1;
 48e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
 498:	8f 91       	pop	r24
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_19>:

ISR(SPI_STC_vect){
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	0b b6       	in	r0, 0x3b	; 59
 4b0:	0f 92       	push	r0
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	spi_tranciever();
 4ca:	1e d0       	rcall	.+60     	; 0x508 <spi_tranciever>
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0b be       	out	0x3b, r0	; 59
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <calc_outgoing_checksum>:
{
	DDRB = (1 << DDB6);			//Set MISO as output
	DDRD = (1 << DDD0);			//Set pin 0 of PORTD as output, used to tell pi when new data is available
	PORTD &= 0b11111110;		//Inits pin 0 of PORTD to 0
	SPCR=(1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
	buffer.lapsensor = 0xFF;
 4f2:	fc 01       	movw	r30, r24
 4f4:	9c 01       	movw	r18, r24
 4f6:	2b 5f       	subi	r18, 0xFB	; 251
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	91 91       	ld	r25, Z+
 4fe:	89 27       	eor	r24, r25
 500:	e2 17       	cp	r30, r18
 502:	f3 07       	cpc	r31, r19
 504:	d9 f7       	brne	.-10     	; 0x4fc <calc_outgoing_checksum+0xa>
 506:	08 95       	ret

00000508 <spi_tranciever>:
}

//Checks if this is the end of the message, else sends next byte
void spi_tranciever(){
	if (tranciever_count == OUTGOING_PACKET_SIZE){
 508:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tranciever_count>
 50c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tranciever_count+0x1>
 510:	06 97       	sbiw	r24, 0x06	; 6
 512:	21 f5       	brne	.+72     	; 0x55c <spi_tranciever+0x54>
		tranciever_count = 0;
 514:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tranciever_count+0x1>
 518:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tranciever_count>
		PORTD &= 0b11111110;
 51c:	58 98       	cbi	0x0b, 0	; 11
		if (buffer.lapsensor != 0xFF){
 51e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <buffer+0x4>
 522:	8f 3f       	cpi	r24, 0xFF	; 255
 524:	79 f0       	breq	.+30     	; 0x544 <spi_tranciever+0x3c>
			set_outgoing_data(buffer);
 526:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <buffer>
 52a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <buffer+0x1>
 52e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <buffer+0x2>
 532:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <buffer+0x3>
 536:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <buffer+0x4>
 53a:	4c d0       	rcall	.+152    	; 0x5d4 <set_outgoing_data>
			
			buffer.lapsensor = 0xFF;
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <buffer+0x4>
 542:	08 95       	ret
		}
		else{
			set_outgoing(outgoing_data);
 544:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <outgoing_data>
 548:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <outgoing_data+0x1>
 54c:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <outgoing_data+0x2>
 550:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <outgoing_data+0x3>
 554:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <outgoing_data+0x4>
 558:	13 c0       	rjmp	.+38     	; 0x580 <set_outgoing>
 55a:	08 95       	ret
		}
	}
	else{
		SPDR = outgoing[tranciever_count];
 55c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <tranciever_count>
 560:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <tranciever_count+0x1>
 564:	e9 5f       	subi	r30, 0xF9	; 249
 566:	fe 4f       	sbci	r31, 0xFE	; 254
 568:	80 81       	ld	r24, Z
 56a:	8e bd       	out	0x2e, r24	; 46
		tranciever_count++;
 56c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tranciever_count>
 570:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tranciever_count+0x1>
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <tranciever_count+0x1>
 57a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tranciever_count>
 57e:	08 95       	ret

00000580 <set_outgoing>:
	}
	return checksum;
}

//converts the data of the incomming 'sensormodul_AP_data' to the 'outgoing' char array
void set_outgoing(sensormodul_AP_data data){
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	00 d0       	rcall	.+0      	; 0x58a <set_outgoing+0xa>
 58a:	00 d0       	rcall	.+0      	; 0x58c <set_outgoing+0xc>
 58c:	1f 92       	push	r1
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	49 83       	std	Y+1, r20	; 0x01
 594:	5a 83       	std	Y+2, r21	; 0x02
 596:	6b 83       	std	Y+3, r22	; 0x03
 598:	7c 83       	std	Y+4, r23	; 0x04
 59a:	8d 83       	std	Y+5, r24	; 0x05
	memcpy((void*) outgoing, (void*) data.sonar_data, 4);
 59c:	07 e0       	ldi	r16, 0x07	; 7
 59e:	11 e0       	ldi	r17, 0x01	; 1
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	9a 81       	ldd	r25, Y+2	; 0x02
 5a4:	ab 81       	ldd	r26, Y+3	; 0x03
 5a6:	bc 81       	ldd	r27, Y+4	; 0x04
 5a8:	f8 01       	movw	r30, r16
 5aa:	80 83       	st	Z, r24
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	a2 83       	std	Z+2, r26	; 0x02
 5b0:	b3 83       	std	Z+3, r27	; 0x03
	outgoing[4] = data.lapsensor;
 5b2:	8d 81       	ldd	r24, Y+5	; 0x05
 5b4:	84 83       	std	Z+4, r24	; 0x04
			
	outgoing[5] = calc_outgoing_checksum(outgoing);
 5b6:	c8 01       	movw	r24, r16
 5b8:	9c df       	rcall	.-200    	; 0x4f2 <calc_outgoing_checksum>
 5ba:	f8 01       	movw	r30, r16
 5bc:	85 83       	std	Z+5, r24	; 0x05
	
	spi_tranciever();
 5be:	a4 df       	rcall	.-184    	; 0x508 <spi_tranciever>
 5c0:	0f 90       	pop	r0
}
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <set_outgoing_data>:
 5d4:	cf 93       	push	r28

void set_outgoing_data(sensormodul_AP_data data){
 5d6:	df 93       	push	r29
 5d8:	00 d0       	rcall	.+0      	; 0x5da <set_outgoing_data+0x6>
 5da:	00 d0       	rcall	.+0      	; 0x5dc <set_outgoing_data+0x8>
 5dc:	1f 92       	push	r1
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	49 83       	std	Y+1, r20	; 0x01
 5e4:	5a 83       	std	Y+2, r21	; 0x02
 5e6:	6b 83       	std	Y+3, r22	; 0x03
 5e8:	7c 83       	std	Y+4, r23	; 0x04
 5ea:	8d 83       	std	Y+5, r24	; 0x05
	if ((PINB & 0b00010000) != 0){
 5ec:	1c 9b       	sbis	0x03, 4	; 3
 5ee:	0c c0       	rjmp	.+24     	; 0x608 <set_outgoing_data+0x34>
		set_outgoing(data);
 5f0:	c7 df       	rcall	.-114    	; 0x580 <set_outgoing>
		outgoing_data = data;
 5f2:	85 e0       	ldi	r24, 0x05	; 5
 5f4:	fe 01       	movw	r30, r28
 5f6:	31 96       	adiw	r30, 0x01	; 1
 5f8:	ab e1       	ldi	r26, 0x1B	; 27
 5fa:	b1 e0       	ldi	r27, 0x01	; 1
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	8a 95       	dec	r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <set_outgoing_data+0x28>
		
		PORTD |= 0b00000001;
 604:	58 9a       	sbi	0x0b, 0	; 11
 606:	09 c0       	rjmp	.+18     	; 0x61a <set_outgoing_data+0x46>
	}
	else{
		buffer = data;
 608:	85 e0       	ldi	r24, 0x05	; 5
 60a:	fe 01       	movw	r30, r28
 60c:	31 96       	adiw	r30, 0x01	; 1
 60e:	a6 e1       	ldi	r26, 0x16	; 22
 610:	b1 e0       	ldi	r27, 0x01	; 1
 612:	01 90       	ld	r0, Z+
 614:	0d 92       	st	X+, r0
 616:	8a 95       	dec	r24
 618:	e1 f7       	brne	.-8      	; 0x612 <set_outgoing_data+0x3e>
	}
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <__udivmodsi4>:
 62a:	a1 e2       	ldi	r26, 0x21	; 33
 62c:	1a 2e       	mov	r1, r26
 62e:	aa 1b       	sub	r26, r26
 630:	bb 1b       	sub	r27, r27
 632:	fd 01       	movw	r30, r26
 634:	0d c0       	rjmp	.+26     	; 0x650 <__udivmodsi4_ep>

00000636 <__udivmodsi4_loop>:
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	ee 1f       	adc	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	a2 17       	cp	r26, r18
 640:	b3 07       	cpc	r27, r19
 642:	e4 07       	cpc	r30, r20
 644:	f5 07       	cpc	r31, r21
 646:	20 f0       	brcs	.+8      	; 0x650 <__udivmodsi4_ep>
 648:	a2 1b       	sub	r26, r18
 64a:	b3 0b       	sbc	r27, r19
 64c:	e4 0b       	sbc	r30, r20
 64e:	f5 0b       	sbc	r31, r21

00000650 <__udivmodsi4_ep>:
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a 94       	dec	r1
 65a:	69 f7       	brne	.-38     	; 0x636 <__udivmodsi4_loop>
 65c:	60 95       	com	r22
 65e:	70 95       	com	r23
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	bd 01       	movw	r22, r26
 66a:	cf 01       	movw	r24, r30
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
