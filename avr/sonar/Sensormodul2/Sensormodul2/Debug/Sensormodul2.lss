
Sensormodul2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9c  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a21  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000345  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002ac5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	f1 c0       	rjmp	.+482    	; 0x1f0 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	7e c0       	rjmp	.+252    	; 0x186 <__vector_34>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1f d0       	rcall	.+62     	; 0x102 <main>
  c4:	21 c1       	rjmp	.+578    	; 0x308 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lapsensor_init>:
void lapsensor_init(){
	//Pin B2 will serve as the interrupt pin
	//Pin B3 will serve as a clear to the lap sensor
	
	//16bit Timer Set-up for lapcounter
	TCCR3A |= _BV(WGM32);
  c8:	e0 e9       	ldi	r30, 0x90	; 144
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS32) |_BV(CS30);		//16MHz, 16 bit timer and 1024 prescaler gives 0.95367431640625Hz
  d2:	e1 e9       	ldi	r30, 0x91	; 145
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	80 83       	st	Z, r24
	TCNT3 = 0;					// Reset counter
  dc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	TIMSK3 |= (1 << TOIE3);
  e4:	e1 e7       	ldi	r30, 0x71	; 113
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21) | _BV(ISC20);
  ee:	e9 e6       	ldi	r30, 0x69	; 105
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 63       	ori	r24, 0x30	; 48
  f6:	80 83       	st	Z, r24
	EIMSK |= _BV(INT2);
  f8:	ea 9a       	sbi	0x1d, 2	; 29
	DDRB |= 0b00001000;
  fa:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= 0b11111011;	
  fc:	22 98       	cbi	0x04, 2	; 4
	unclear_lap();
  fe:	2b 9a       	sbi	0x05, 3	; 5
 100:	08 95       	ret

00000102 <main>:
#define unclear_lap()  PORTB |= _BV(3)

int main(void)
{
	//Init spi
	spi_init();
 102:	af d0       	rcall	.+350    	; 0x262 <spi_init>
	pulse++;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 10c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
 110:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	a1 1d       	adc	r26, r1
 118:	b1 1d       	adc	r27, r1
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 122:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 126:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
	
	//Init sensormodule
	//sensor_init();
	
	//Init lap sensor
	lapsensor_init();
 12a:	ce df       	rcall	.-100    	; 0xc8 <lapsensor_init>
	
	//Enable globel interrupt
	sei();
 12c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x30>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x36>
 138:	00 00       	nop
				break;
			case send_data:
				ready_to_send_spi();
				break;
		}*/
		pulse++;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 142:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
 146:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
 14a:	02 96       	adiw	r24, 0x02	; 2
 14c:	a1 1d       	adc	r26, r1
 14e:	b1 1d       	adc	r27, r1
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 158:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 15c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
 160:	e6 cf       	rjmp	.-52     	; 0x12e <main+0x2c>

00000162 <send_spi>:
	unclear_lap();
}


void send_spi(){
	data.sonar_data[0] = 0;
 162:	e0 e1       	ldi	r30, 0x10	; 16
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	10 82       	st	Z, r1
	data.sonar_data[1] = 0;
 168:	11 82       	std	Z+1, r1	; 0x01
	data.sonar_data[2] = 0;
 16a:	12 82       	std	Z+2, r1	; 0x02
	data.sonar_data[3] = 0;
 16c:	13 82       	std	Z+3, r1	; 0x03
	set_outgoing(data);
 16e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <data>
 172:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <data+0x1>
 176:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <data+0x2>
 17a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <data+0x3>
 17e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <data+0x4>
 182:	98 c0       	rjmp	.+304    	; 0x2b4 <set_outgoing>
 184:	08 95       	ret

00000186 <__vector_34>:
}

ISR(TIMER3_OVF_vect)
{		
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
		data.lapsensor = 0;
 190:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <data+0x4>
		clear_lap();
 194:	2b 98       	cbi	0x05, 3	; 5
		unclear_lap();
 196:	2b 9a       	sbi	0x05, 3	; 5
}
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_19>:

//Send data to master
ISR(SPI_STC_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	spi_tranciever();
 1c8:	57 d0       	rcall	.+174    	; 0x278 <spi_tranciever>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_3>:

	
ISR(INT2_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0b b6       	in	r0, 0x3b	; 59
 1fc:	0f 92       	push	r0
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
		//if (bit_is_set(PORTB,2))
		
			data.lapsensor = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <data+0x4>
			send_spi();
 21c:	a2 df       	rcall	.-188    	; 0x162 <send_spi>
			TCNT3 = 0;
 21e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 222:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
			//clear_lap();
			//_delay_ms(10);
			//unclear_lap();
		
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <calc_outgoing_checksum>:

#define clear_lap()  PORTB &= ~_BV(3)
#define unclear_lap()  PORTB |= _BV(3)

//Calculates a simple XOR checksum for the outgoing package
unsigned char calc_outgoing_checksum(volatile unsigned char data[OUTGOING_PACKET_SIZE - 1]){
 24c:	fc 01       	movw	r30, r24
 24e:	9c 01       	movw	r18, r24
 250:	2b 5f       	subi	r18, 0xFB	; 251
 252:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char checksum = 0;
 254:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < (OUTGOING_PACKET_SIZE - 1); i++){
		checksum = checksum ^ data[i];
 256:	91 91       	ld	r25, Z+
 258:	89 27       	eor	r24, r25
#define unclear_lap()  PORTB |= _BV(3)

//Calculates a simple XOR checksum for the outgoing package
unsigned char calc_outgoing_checksum(volatile unsigned char data[OUTGOING_PACKET_SIZE - 1]){
	unsigned char checksum = 0;
	for (int i = 0; i < (OUTGOING_PACKET_SIZE - 1); i++){
 25a:	e2 17       	cp	r30, r18
 25c:	f3 07       	cpc	r31, r19
 25e:	d9 f7       	brne	.-10     	; 0x256 <calc_outgoing_checksum+0xa>
		checksum = checksum ^ data[i];
	}
	return checksum;
}
 260:	08 95       	ret

00000262 <spi_init>:
}

// Initialize SPI Slave Device
void spi_init (void)
{
	DDRB = (1 << DDB6);			//Set MISO as output
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD0);			//Set pin 0 of PORTD as output, used to tell pi when new data is available
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0b11111110;		//Inits pin 0 of PORTD to 0
 26a:	58 98       	cbi	0x0b, 0	; 11
	SPCR=(1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
 26c:	80 ec       	ldi	r24, 0xC0	; 192
 26e:	8c bd       	out	0x2c, r24	; 44
	buffer.lapsensor = 0xFF;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <buffer+0x4>
 276:	08 95       	ret

00000278 <spi_tranciever>:
			buffer.lapsensor = 0xFF;
		}
		else{
			set_outgoing(outgoing_data);
		}*/
	if (tranciever_count == OUTGOING_PACKET_SIZE){
 278:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tranciever_count>
 27c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tranciever_count+0x1>
 280:	06 97       	sbiw	r24, 0x06	; 6
 282:	31 f4       	brne	.+12     	; 0x290 <spi_tranciever+0x18>
		tranciever_count = 0;
 284:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tranciever_count+0x1>
 288:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tranciever_count>
		PORTD &= 0b11111110;
 28c:	58 98       	cbi	0x0b, 0	; 11
 28e:	08 95       	ret
	}
	else{
		SPDR = outgoing[tranciever_count];
 290:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <tranciever_count>
 294:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <tranciever_count+0x1>
 298:	ea 5f       	subi	r30, 0xFA	; 250
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 81       	ld	r24, Z
 29e:	8e bd       	out	0x2e, r24	; 46
		tranciever_count++;
 2a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tranciever_count>
 2a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tranciever_count+0x1>
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tranciever_count+0x1>
 2ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tranciever_count>
 2b2:	08 95       	ret

000002b4 <set_outgoing>:
	}
	return checksum;
}

//converts the data of the incomming 'sensormodul_AP_data' to the 'outgoing' char array
void set_outgoing(sensormodul_AP_data data){
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 d0       	rcall	.+0      	; 0x2be <set_outgoing+0xa>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <set_outgoing+0xc>
 2c0:	1f 92       	push	r1
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	49 83       	std	Y+1, r20	; 0x01
 2c8:	5a 83       	std	Y+2, r21	; 0x02
 2ca:	6b 83       	std	Y+3, r22	; 0x03
 2cc:	7c 83       	std	Y+4, r23	; 0x04
 2ce:	8d 83       	std	Y+5, r24	; 0x05
	memcpy((void*) outgoing, (void*) data.sonar_data, 4);
 2d0:	06 e0       	ldi	r16, 0x06	; 6
 2d2:	11 e0       	ldi	r17, 0x01	; 1
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	9a 81       	ldd	r25, Y+2	; 0x02
 2d8:	ab 81       	ldd	r26, Y+3	; 0x03
 2da:	bc 81       	ldd	r27, Y+4	; 0x04
 2dc:	f8 01       	movw	r30, r16
 2de:	80 83       	st	Z, r24
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	a2 83       	std	Z+2, r26	; 0x02
 2e4:	b3 83       	std	Z+3, r27	; 0x03
	outgoing[4] = data.lapsensor;
 2e6:	8d 81       	ldd	r24, Y+5	; 0x05
 2e8:	84 83       	std	Z+4, r24	; 0x04
			
	outgoing[5] = calc_outgoing_checksum(outgoing);
 2ea:	c8 01       	movw	r24, r16
 2ec:	af df       	rcall	.-162    	; 0x24c <calc_outgoing_checksum>
 2ee:	f8 01       	movw	r30, r16
 2f0:	85 83       	std	Z+5, r24	; 0x05
	
	spi_tranciever();
 2f2:	c2 df       	rcall	.-124    	; 0x278 <spi_tranciever>
 2f4:	0f 90       	pop	r0
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
