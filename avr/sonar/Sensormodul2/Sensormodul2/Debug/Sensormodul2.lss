
Sensormodul2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104e  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ab  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b34  00000000  00000000  00003135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c1       	rjmp	.+864    	; 0x372 <__vector_4>
  12:	00 00       	nop
  14:	d7 c1       	rjmp	.+942    	; 0x3c4 <__vector_5>
  16:	00 00       	nop
  18:	fe c1       	rjmp	.+1020   	; 0x416 <__vector_6>
  1a:	00 00       	nop
  1c:	25 c2       	rjmp	.+1098   	; 0x468 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c2       	rjmp	.+1148   	; 0x4ba <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e5       	ldi	r30, 0x5A	; 90
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	c8 c2       	rjmp	.+1424   	; 0x656 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

void calc_sonar_data(unsigned short sonar_nr, uint32_t pulse){
	uint32_t cm;
	cm = (pulse/480)+2;
	sonar_data[sonar_nr] = cm;
}
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	81 b9       	out	0x01, r24	; 1
  cc:	84 b9       	out	0x04, r24	; 4
  ce:	87 b9       	out	0x07, r24	; 7
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x14>
  dc:	00 00       	nop
  de:	e8 e6       	ldi	r30, 0x68	; 104
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	80 83       	st	Z, r24
  e8:	eb e6       	ldi	r30, 0x6B	; 107
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
  f2:	ec e6       	ldi	r30, 0x6C	; 108
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
  fc:	ed e6       	ldi	r30, 0x6D	; 109
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
 106:	e3 e7       	ldi	r30, 0x73	; 115
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 83       	st	Z, r24
 110:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 114:	78 94       	sei
 116:	c5 e0       	ldi	r28, 0x05	; 5
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	21 ee       	ldi	r18, 0xE1	; 225
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	91 50       	subi	r25, 0x01	; 1
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x58>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x62>
 12a:	00 00       	nop
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 05       	cpc	r25, r1
 138:	d1 f0       	breq	.+52     	; 0x16e <main+0xa6>
 13a:	1c f4       	brge	.+6      	; 0x142 <main+0x7a>
 13c:	89 2b       	or	r24, r25
 13e:	39 f0       	breq	.+14     	; 0x14e <main+0x86>
 140:	45 c0       	rjmp	.+138    	; 0x1cc <main+0x104>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	91 05       	cpc	r25, r1
 146:	19 f1       	breq	.+70     	; 0x18e <main+0xc6>
 148:	03 97       	sbiw	r24, 0x03	; 3
 14a:	89 f1       	breq	.+98     	; 0x1ae <main+0xe6>
 14c:	3f c0       	rjmp	.+126    	; 0x1cc <main+0x104>
 14e:	11 9a       	sbi	0x02, 1	; 2
 150:	90 e5       	ldi	r25, 0x50	; 80
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x8a>
 156:	11 98       	cbi	0x02, 1	; 2
 158:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 15c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9c e9       	ldi	r25, 0x9C	; 156
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x9c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xa2>
 16a:	00 00       	nop
 16c:	2f c0       	rjmp	.+94     	; 0x1cc <main+0x104>
 16e:	29 9a       	sbi	0x05, 1	; 5
 170:	90 e5       	ldi	r25, 0x50	; 80
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xaa>
 176:	29 98       	cbi	0x05, 1	; 5
 178:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 17c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9c e9       	ldi	r25, 0x9C	; 156
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xbc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xc2>
 18a:	00 00       	nop
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <main+0x104>
 18e:	41 9a       	sbi	0x08, 1	; 8
 190:	90 e5       	ldi	r25, 0x50	; 80
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xca>
 196:	41 98       	cbi	0x08, 1	; 8
 198:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 19c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9c e9       	ldi	r25, 0x9C	; 156
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0xdc>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xe2>
 1aa:	00 00       	nop
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <main+0x104>
 1ae:	59 9a       	sbi	0x0b, 1	; 11
 1b0:	90 e5       	ldi	r25, 0x50	; 80
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xea>
 1b6:	59 98       	cbi	0x0b, 1	; 11
 1b8:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 1bc:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0xfc>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x102>
 1ca:	00 00       	nop
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1d4:	06 97       	sbiw	r24, 0x06	; 6
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0x112>
 1d8:	a0 cf       	rjmp	.-192    	; 0x11a <main+0x52>
 1da:	f8 94       	cli
 1dc:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <data>
 1e0:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <data+0x1>
 1e4:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <data+0x2>
 1e8:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <data+0x3>
 1ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <data+0x4>
 1f0:	e5 d1       	rcall	.+970    	; 0x5bc <set_outgoing_data>
 1f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 1f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 1fa:	78 94       	sei
 1fc:	8e cf       	rjmp	.-228    	; 0x11a <main+0x52>

000001fe <sonar_timer_interrupt>:
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	91 05       	cpc	r25, r1
 202:	c9 f1       	breq	.+114    	; 0x276 <sonar_timer_interrupt+0x78>
 204:	1c f4       	brge	.+6      	; 0x20c <sonar_timer_interrupt+0xe>
 206:	89 2b       	or	r24, r25
 208:	49 f0       	breq	.+18     	; 0x21c <sonar_timer_interrupt+0x1e>
 20a:	08 95       	ret
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	91 05       	cpc	r25, r1
 210:	09 f4       	brne	.+2      	; 0x214 <sonar_timer_interrupt+0x16>
 212:	5e c0       	rjmp	.+188    	; 0x2d0 <sonar_timer_interrupt+0xd2>
 214:	03 97       	sbiw	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <sonar_timer_interrupt+0x1c>
 218:	88 c0       	rjmp	.+272    	; 0x32a <sonar_timer_interrupt+0x12c>
 21a:	08 95       	ret
 21c:	00 9b       	sbis	0x00, 0	; 0
 21e:	08 c0       	rjmp	.+16     	; 0x230 <sonar_timer_interrupt+0x32>
 220:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 224:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 22e:	08 95       	ret
 230:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 234:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 238:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <pulse>
 244:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <pulse+0x1>
 248:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulse+0x2>
 24c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulse+0x3>
 250:	20 ee       	ldi	r18, 0xE0	; 224
 252:	31 e0       	ldi	r19, 0x01	; 1
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	dc d1       	rcall	.+952    	; 0x612 <__udivmodsi4>
 25a:	da 01       	movw	r26, r20
 25c:	c9 01       	movw	r24, r18
 25e:	02 96       	adiw	r24, 0x02	; 2
 260:	a1 1d       	adc	r26, r1
 262:	b1 1d       	adc	r27, r1
 264:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 274:	08 95       	ret
 276:	18 9b       	sbis	0x03, 0	; 3
 278:	08 c0       	rjmp	.+16     	; 0x28a <sonar_timer_interrupt+0x8c>
 27a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 27e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 288:	08 95       	ret
 28a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 28e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 292:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <pulse>
 29e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <pulse+0x1>
 2a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulse+0x2>
 2a6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulse+0x3>
 2aa:	20 ee       	ldi	r18, 0xE0	; 224
 2ac:	31 e0       	ldi	r19, 0x01	; 1
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	af d1       	rcall	.+862    	; 0x612 <__udivmodsi4>
 2b4:	da 01       	movw	r26, r20
 2b6:	c9 01       	movw	r24, r18
 2b8:	02 96       	adiw	r24, 0x02	; 2
 2ba:	a1 1d       	adc	r26, r1
 2bc:	b1 1d       	adc	r27, r1
 2be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 2ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2ce:	08 95       	ret
 2d0:	30 9b       	sbis	0x06, 0	; 6
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <sonar_timer_interrupt+0xe6>
 2d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2e2:	08 95       	ret
 2e4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2e8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ec:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <pulse>
 2f8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <pulse+0x1>
 2fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulse+0x2>
 300:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulse+0x3>
 304:	20 ee       	ldi	r18, 0xE0	; 224
 306:	31 e0       	ldi	r19, 0x01	; 1
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	82 d1       	rcall	.+772    	; 0x612 <__udivmodsi4>
 30e:	da 01       	movw	r26, r20
 310:	c9 01       	movw	r24, r18
 312:	02 96       	adiw	r24, 0x02	; 2
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
 318:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 324:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 328:	08 95       	ret
 32a:	89 b1       	in	r24, 0x09	; 9
 32c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 330:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 334:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <pulse>
 340:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <pulse+0x1>
 344:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulse+0x2>
 348:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulse+0x3>
 34c:	20 ee       	ldi	r18, 0xE0	; 224
 34e:	31 e0       	ldi	r19, 0x01	; 1
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	5e d1       	rcall	.+700    	; 0x612 <__udivmodsi4>
 356:	da 01       	movw	r26, r20
 358:	c9 01       	movw	r24, r18
 35a:	02 96       	adiw	r24, 0x02	; 2
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
 360:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sonar_data>
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 370:	08 95       	ret

00000372 <__vector_4>:


ISR(PCINT0_vect){sonar_timer_interrupt(0);}
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0b b6       	in	r0, 0x3b	; 59
 37e:	0f 92       	push	r0
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	30 df       	rcall	.-416    	; 0x1fe <sonar_timer_interrupt>
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0b be       	out	0x3b, r0	; 59
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_5>:


ISR(PCINT1_vect){sonar_timer_interrupt(1);}
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	0b b6       	in	r0, 0x3b	; 59
 3d0:	0f 92       	push	r0
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	07 df       	rcall	.-498    	; 0x1fe <sonar_timer_interrupt>
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0b be       	out	0x3b, r0	; 59
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__vector_6>:


ISR(PCINT2_vect){sonar_timer_interrupt(2);}
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	0b b6       	in	r0, 0x3b	; 59
 422:	0f 92       	push	r0
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	de de       	rcall	.-580    	; 0x1fe <sonar_timer_interrupt>
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0b be       	out	0x3b, r0	; 59
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_7>:


ISR(PCINT3_vect){sonar_timer_interrupt(3);}
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	0b b6       	in	r0, 0x3b	; 59
 474:	0f 92       	push	r0
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	b5 de       	rcall	.-662    	; 0x1fe <sonar_timer_interrupt>
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0b be       	out	0x3b, r0	; 59
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_15>:



//Take too long time too get data, reset
ISR (TIMER1_OVF_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
	//Stops counter
	TCCR1B=0;
 4c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	mode = 0;
 4c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 4cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
}
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <calc_outgoing_checksum>:
{
	DDRB = (1 << DDB6);			//Set MISO as output
	DDRD = (1 << DDD0);			//Set pin 0 of PORTD as output, used to tell pi when new data is available
	PORTD &= 0b11111110;		//Inits pin 0 of PORTD to 0
	SPCR=(1<<SPE)|(1<<SPIE);	//Enable SPI && interrupt enable bit
	buffer.lapsensor = 0xFF;
 4da:	fc 01       	movw	r30, r24
 4dc:	9c 01       	movw	r18, r24
 4de:	2b 5f       	subi	r18, 0xFB	; 251
 4e0:	3f 4f       	sbci	r19, 0xFF	; 255
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	91 91       	ld	r25, Z+
 4e6:	89 27       	eor	r24, r25
 4e8:	e2 17       	cp	r30, r18
 4ea:	f3 07       	cpc	r31, r19
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <calc_outgoing_checksum+0xa>
 4ee:	08 95       	ret

000004f0 <spi_tranciever>:
}

//Checks if this is the end of the message, else sends next byte
void spi_tranciever(){
	if (tranciever_count == OUTGOING_PACKET_SIZE){
 4f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tranciever_count>
 4f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tranciever_count+0x1>
 4f8:	06 97       	sbiw	r24, 0x06	; 6
 4fa:	21 f5       	brne	.+72     	; 0x544 <spi_tranciever+0x54>
		tranciever_count = 0;
 4fc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tranciever_count+0x1>
 500:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tranciever_count>
		PORTD &= 0b11111110;
 504:	58 98       	cbi	0x0b, 0	; 11
		if (buffer.lapsensor != 0xFF){
 506:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <buffer+0x4>
 50a:	8f 3f       	cpi	r24, 0xFF	; 255
 50c:	79 f0       	breq	.+30     	; 0x52c <spi_tranciever+0x3c>
			set_outgoing_data(buffer);
 50e:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <buffer>
 512:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <buffer+0x1>
 516:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <buffer+0x2>
 51a:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <buffer+0x3>
 51e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <buffer+0x4>
 522:	4c d0       	rcall	.+152    	; 0x5bc <set_outgoing_data>
			
			buffer.lapsensor = 0xFF;
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <buffer+0x4>
 52a:	08 95       	ret
		}
		else{
			set_outgoing(outgoing_data);
 52c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <outgoing_data>
 530:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <outgoing_data+0x1>
 534:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <outgoing_data+0x2>
 538:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <outgoing_data+0x3>
 53c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <outgoing_data+0x4>
 540:	13 c0       	rjmp	.+38     	; 0x568 <set_outgoing>
 542:	08 95       	ret
		}
	}
	else{
		SPDR = outgoing[tranciever_count];
 544:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <tranciever_count>
 548:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <tranciever_count+0x1>
 54c:	e8 5f       	subi	r30, 0xF8	; 248
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	80 81       	ld	r24, Z
 552:	8e bd       	out	0x2e, r24	; 46
		tranciever_count++;
 554:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tranciever_count>
 558:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tranciever_count+0x1>
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tranciever_count+0x1>
 562:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tranciever_count>
 566:	08 95       	ret

00000568 <set_outgoing>:
	}
	return checksum;
}

//converts the data of the incomming 'sensormodul_AP_data' to the 'outgoing' char array
void set_outgoing(sensormodul_AP_data data){
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <set_outgoing+0xa>
 572:	00 d0       	rcall	.+0      	; 0x574 <set_outgoing+0xc>
 574:	1f 92       	push	r1
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	49 83       	std	Y+1, r20	; 0x01
 57c:	5a 83       	std	Y+2, r21	; 0x02
 57e:	6b 83       	std	Y+3, r22	; 0x03
 580:	7c 83       	std	Y+4, r23	; 0x04
 582:	8d 83       	std	Y+5, r24	; 0x05
	memcpy((void*) outgoing, (void*) data.sonar_data, 4);
 584:	08 e0       	ldi	r16, 0x08	; 8
 586:	11 e0       	ldi	r17, 0x01	; 1
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	9a 81       	ldd	r25, Y+2	; 0x02
 58c:	ab 81       	ldd	r26, Y+3	; 0x03
 58e:	bc 81       	ldd	r27, Y+4	; 0x04
 590:	f8 01       	movw	r30, r16
 592:	80 83       	st	Z, r24
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	a2 83       	std	Z+2, r26	; 0x02
 598:	b3 83       	std	Z+3, r27	; 0x03
	outgoing[4] = data.lapsensor;
 59a:	8d 81       	ldd	r24, Y+5	; 0x05
 59c:	84 83       	std	Z+4, r24	; 0x04
			
	outgoing[5] = calc_outgoing_checksum(outgoing);
 59e:	c8 01       	movw	r24, r16
 5a0:	9c df       	rcall	.-200    	; 0x4da <calc_outgoing_checksum>
 5a2:	f8 01       	movw	r30, r16
 5a4:	85 83       	std	Z+5, r24	; 0x05
	
	spi_tranciever();
 5a6:	a4 df       	rcall	.-184    	; 0x4f0 <spi_tranciever>
 5a8:	0f 90       	pop	r0
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <set_outgoing_data>:
 5bc:	cf 93       	push	r28

void set_outgoing_data(sensormodul_AP_data data){
 5be:	df 93       	push	r29
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <set_outgoing_data+0x6>
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <set_outgoing_data+0x8>
 5c4:	1f 92       	push	r1
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	49 83       	std	Y+1, r20	; 0x01
 5cc:	5a 83       	std	Y+2, r21	; 0x02
 5ce:	6b 83       	std	Y+3, r22	; 0x03
 5d0:	7c 83       	std	Y+4, r23	; 0x04
 5d2:	8d 83       	std	Y+5, r24	; 0x05
	if ((PINB & 0b00010000) != 0){
 5d4:	1c 9b       	sbis	0x03, 4	; 3
 5d6:	0c c0       	rjmp	.+24     	; 0x5f0 <set_outgoing_data+0x34>
		set_outgoing(data);
 5d8:	c7 df       	rcall	.-114    	; 0x568 <set_outgoing>
		outgoing_data = data;
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	fe 01       	movw	r30, r28
 5de:	31 96       	adiw	r30, 0x01	; 1
 5e0:	ae e1       	ldi	r26, 0x1E	; 30
 5e2:	b1 e0       	ldi	r27, 0x01	; 1
 5e4:	01 90       	ld	r0, Z+
 5e6:	0d 92       	st	X+, r0
 5e8:	8a 95       	dec	r24
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <set_outgoing_data+0x28>
		
		PORTD |= 0b00000001;
 5ec:	58 9a       	sbi	0x0b, 0	; 11
 5ee:	09 c0       	rjmp	.+18     	; 0x602 <set_outgoing_data+0x46>
	}
	else{
		buffer = data;
 5f0:	85 e0       	ldi	r24, 0x05	; 5
 5f2:	fe 01       	movw	r30, r28
 5f4:	31 96       	adiw	r30, 0x01	; 1
 5f6:	a9 e1       	ldi	r26, 0x19	; 25
 5f8:	b1 e0       	ldi	r27, 0x01	; 1
 5fa:	01 90       	ld	r0, Z+
 5fc:	0d 92       	st	X+, r0
 5fe:	8a 95       	dec	r24
 600:	e1 f7       	brne	.-8      	; 0x5fa <set_outgoing_data+0x3e>
	}
}
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <__udivmodsi4>:
 612:	a1 e2       	ldi	r26, 0x21	; 33
 614:	1a 2e       	mov	r1, r26
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	fd 01       	movw	r30, r26
 61c:	0d c0       	rjmp	.+26     	; 0x638 <__udivmodsi4_ep>

0000061e <__udivmodsi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	ee 1f       	adc	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	a2 17       	cp	r26, r18
 628:	b3 07       	cpc	r27, r19
 62a:	e4 07       	cpc	r30, r20
 62c:	f5 07       	cpc	r31, r21
 62e:	20 f0       	brcs	.+8      	; 0x638 <__udivmodsi4_ep>
 630:	a2 1b       	sub	r26, r18
 632:	b3 0b       	sbc	r27, r19
 634:	e4 0b       	sbc	r30, r20
 636:	f5 0b       	sbc	r31, r21

00000638 <__udivmodsi4_ep>:
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a 94       	dec	r1
 642:	69 f7       	brne	.-38     	; 0x61e <__udivmodsi4_loop>
 644:	60 95       	com	r22
 646:	70 95       	com	r23
 648:	80 95       	com	r24
 64a:	90 95       	com	r25
 64c:	9b 01       	movw	r18, r22
 64e:	ac 01       	movw	r20, r24
 650:	bd 01       	movw	r22, r26
 652:	cf 01       	movw	r24, r30
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
